1
00:00:00,560 --> 00:00:02,470


2
00:00:02,470 --> 00:00:02,480
hello everyone

3
00:00:02,480 --> 00:00:04,870
hello everyone
welcome to an introduction to object

4
00:00:04,870 --> 00:00:04,880
welcome to an introduction to object

5
00:00:04,880 --> 00:00:06,950
welcome to an introduction to object
oriented programming

6
00:00:06,950 --> 00:00:06,960
oriented programming

7
00:00:06,960 --> 00:00:08,310
oriented programming
in this course

8
00:00:08,310 --> 00:00:08,320
in this course

9
00:00:08,320 --> 00:00:09,750
in this course
we will be getting into what

10
00:00:09,750 --> 00:00:09,760
we will be getting into what

11
00:00:09,760 --> 00:00:12,310
we will be getting into what
object-oriented programming means

12
00:00:12,310 --> 00:00:12,320
object-oriented programming means

13
00:00:12,320 --> 00:00:14,470
object-oriented programming means
as well as going over its four main

14
00:00:14,470 --> 00:00:14,480
as well as going over its four main

15
00:00:14,480 --> 00:00:16,230
as well as going over its four main
principles

16
00:00:16,230 --> 00:00:16,240
principles

17
00:00:16,240 --> 00:00:18,070
principles
this course will assume that you have

18
00:00:18,070 --> 00:00:18,080
this course will assume that you have

19
00:00:18,080 --> 00:00:19,750
this course will assume that you have
some knowledge of programming before

20
00:00:19,750 --> 00:00:19,760
some knowledge of programming before

21
00:00:19,760 --> 00:00:21,429
some knowledge of programming before
hopping in

22
00:00:21,429 --> 00:00:21,439
hopping in

23
00:00:21,439 --> 00:00:23,269
hopping in
if that's not the case

24
00:00:23,269 --> 00:00:23,279
if that's not the case

25
00:00:23,279 --> 00:00:24,950
if that's not the case
i would suggest checking out our

26
00:00:24,950 --> 00:00:24,960
i would suggest checking out our

27
00:00:24,960 --> 00:00:27,189
i would suggest checking out our
introduction to programming video which

28
00:00:27,189 --> 00:00:27,199
introduction to programming video which

29
00:00:27,199 --> 00:00:29,589
introduction to programming video which
will be linked in the description

30
00:00:29,589 --> 00:00:29,599
will be linked in the description

31
00:00:29,599 --> 00:00:31,830
will be linked in the description
that video will give you information on

32
00:00:31,830 --> 00:00:31,840
that video will give you information on

33
00:00:31,840 --> 00:00:33,670
that video will give you information on
the basics of programming that are

34
00:00:33,670 --> 00:00:33,680
the basics of programming that are

35
00:00:33,680 --> 00:00:35,990
the basics of programming that are
necessary to be able to understand more

36
00:00:35,990 --> 00:00:36,000
necessary to be able to understand more

37
00:00:36,000 --> 00:00:38,389
necessary to be able to understand more
advanced topics such as those covered in

38
00:00:38,389 --> 00:00:38,399
advanced topics such as those covered in

39
00:00:38,399 --> 00:00:39,750
advanced topics such as those covered in
this video

40
00:00:39,750 --> 00:00:39,760
this video

41
00:00:39,760 --> 00:00:41,350
this video
for this lecture

42
00:00:41,350 --> 00:00:41,360
for this lecture

43
00:00:41,360 --> 00:00:43,590
for this lecture
we will be exploring object oriented

44
00:00:43,590 --> 00:00:43,600
we will be exploring object oriented

45
00:00:43,600 --> 00:00:45,270
we will be exploring object oriented
programming in a manner that will be

46
00:00:45,270 --> 00:00:45,280
programming in a manner that will be

47
00:00:45,280 --> 00:00:47,190
programming in a manner that will be
applicable for its use in any

48
00:00:47,190 --> 00:00:47,200
applicable for its use in any

49
00:00:47,200 --> 00:00:48,950
applicable for its use in any
programming language in which it is

50
00:00:48,950 --> 00:00:48,960
programming language in which it is

51
00:00:48,960 --> 00:00:51,029
programming language in which it is
supported

52
00:00:51,029 --> 00:00:51,039
supported

53
00:00:51,039 --> 00:00:52,869
supported
examples will be used to explain the

54
00:00:52,869 --> 00:00:52,879
examples will be used to explain the

55
00:00:52,879 --> 00:00:54,869
examples will be used to explain the
concept being discussed

56
00:00:54,869 --> 00:00:54,879
concept being discussed

57
00:00:54,879 --> 00:00:56,389
concept being discussed
however they will be explained well

58
00:00:56,389 --> 00:00:56,399
however they will be explained well

59
00:00:56,399 --> 00:00:57,990
however they will be explained well
enough that specific knowledge of the

60
00:00:57,990 --> 00:00:58,000
enough that specific knowledge of the

61
00:00:58,000 --> 00:00:59,990
enough that specific knowledge of the
language being used in the example will

62
00:00:59,990 --> 00:01:00,000
language being used in the example will

63
00:01:00,000 --> 00:01:02,310
language being used in the example will
not be necessary

64
00:01:02,310 --> 00:01:02,320
not be necessary

65
00:01:02,320 --> 00:01:05,910
not be necessary
with that being said let's get into it

66
00:01:05,910 --> 00:01:05,920
with that being said let's get into it

67
00:01:05,920 --> 00:01:07,670
with that being said let's get into it
in this first section

68
00:01:07,670 --> 00:01:07,680
in this first section

69
00:01:07,680 --> 00:01:09,750
in this first section
we will be going over what object

70
00:01:09,750 --> 00:01:09,760
we will be going over what object

71
00:01:09,760 --> 00:01:12,789
we will be going over what object
oriented programming actually is

72
00:01:12,789 --> 00:01:12,799
oriented programming actually is

73
00:01:12,799 --> 00:01:14,310
oriented programming actually is
in order to understand what

74
00:01:14,310 --> 00:01:14,320
in order to understand what

75
00:01:14,320 --> 00:01:16,550
in order to understand what
object-oriented programming is

76
00:01:16,550 --> 00:01:16,560
object-oriented programming is

77
00:01:16,560 --> 00:01:18,310
object-oriented programming is
it's best to first understand what

78
00:01:18,310 --> 00:01:18,320
it's best to first understand what

79
00:01:18,320 --> 00:01:19,749
it's best to first understand what
objects are

80
00:01:19,749 --> 00:01:19,759
objects are

81
00:01:19,759 --> 00:01:21,510
objects are
and in order to do that

82
00:01:21,510 --> 00:01:21,520
and in order to do that

83
00:01:21,520 --> 00:01:23,030
and in order to do that
it's best to first understand what

84
00:01:23,030 --> 00:01:23,040
it's best to first understand what

85
00:01:23,040 --> 00:01:24,950
it's best to first understand what
primitive data types are

86
00:01:24,950 --> 00:01:24,960
primitive data types are

87
00:01:24,960 --> 00:01:26,870
primitive data types are
so let's start there

88
00:01:26,870 --> 00:01:26,880
so let's start there

89
00:01:26,880 --> 00:01:28,870
so let's start there
primitive data types are exactly what

90
00:01:28,870 --> 00:01:28,880
primitive data types are exactly what

91
00:01:28,880 --> 00:01:30,390
primitive data types are exactly what
they sound like

92
00:01:30,390 --> 00:01:30,400
they sound like

93
00:01:30,400 --> 00:01:32,710
they sound like
variables that store single simple

94
00:01:32,710 --> 00:01:32,720
variables that store single simple

95
00:01:32,720 --> 00:01:34,149
variables that store single simple
values

96
00:01:34,149 --> 00:01:34,159
values

97
00:01:34,159 --> 00:01:36,390
values
examples of such primitive types are the

98
00:01:36,390 --> 00:01:36,400
examples of such primitive types are the

99
00:01:36,400 --> 00:01:37,350
examples of such primitive types are the
byte

100
00:01:37,350 --> 00:01:37,360
byte

101
00:01:37,360 --> 00:01:38,230
byte
int

102
00:01:38,230 --> 00:01:38,240
int

103
00:01:38,240 --> 00:01:39,190
int
float

104
00:01:39,190 --> 00:01:39,200
float

105
00:01:39,200 --> 00:01:42,870
float
double boolean and char

106
00:01:42,870 --> 00:01:42,880
double boolean and char

107
00:01:42,880 --> 00:01:45,270
double boolean and char
these primitive types only act to store

108
00:01:45,270 --> 00:01:45,280
these primitive types only act to store

109
00:01:45,280 --> 00:01:48,789
these primitive types only act to store
a single piece of data of a certain kind

110
00:01:48,789 --> 00:01:48,799
a single piece of data of a certain kind

111
00:01:48,799 --> 00:01:50,950
a single piece of data of a certain kind
and for a while when programming was

112
00:01:50,950 --> 00:01:50,960
and for a while when programming was

113
00:01:50,960 --> 00:01:54,710
and for a while when programming was
still developing this was just fine many

114
00:01:54,710 --> 00:01:54,720
still developing this was just fine many

115
00:01:54,720 --> 00:01:56,310
still developing this was just fine many
programs being written at the time

116
00:01:56,310 --> 00:01:56,320
programs being written at the time

117
00:01:56,320 --> 00:01:58,950
programs being written at the time
weren't complex by today's standards

118
00:01:58,950 --> 00:01:58,960
weren't complex by today's standards

119
00:01:58,960 --> 00:02:00,870
weren't complex by today's standards
thus programmers could get away with

120
00:02:00,870 --> 00:02:00,880
thus programmers could get away with

121
00:02:00,880 --> 00:02:03,670
thus programmers could get away with
only using these primitive types

122
00:02:03,670 --> 00:02:03,680
only using these primitive types

123
00:02:03,680 --> 00:02:04,709
only using these primitive types
however

124
00:02:04,709 --> 00:02:04,719
however

125
00:02:04,719 --> 00:02:06,830
however
as programs became larger and more

126
00:02:06,830 --> 00:02:06,840
as programs became larger and more

127
00:02:06,840 --> 00:02:09,109
as programs became larger and more
complex primitive data types weren't

128
00:02:09,109 --> 00:02:09,119
complex primitive data types weren't

129
00:02:09,119 --> 00:02:11,350
complex primitive data types weren't
really cutting it anymore

130
00:02:11,350 --> 00:02:11,360
really cutting it anymore

131
00:02:11,360 --> 00:02:13,030
really cutting it anymore
programmers began to want to group

132
00:02:13,030 --> 00:02:13,040
programmers began to want to group

133
00:02:13,040 --> 00:02:15,589
programmers began to want to group
variables of similar type together

134
00:02:15,589 --> 00:02:15,599
variables of similar type together

135
00:02:15,599 --> 00:02:17,270
variables of similar type together
why would this be useful

136
00:02:17,270 --> 00:02:17,280
why would this be useful

137
00:02:17,280 --> 00:02:19,030
why would this be useful
well to serve as an example let's

138
00:02:19,030 --> 00:02:19,040
well to serve as an example let's

139
00:02:19,040 --> 00:02:20,790
well to serve as an example let's
imagine you are trying to program a

140
00:02:20,790 --> 00:02:20,800
imagine you are trying to program a

141
00:02:20,800 --> 00:02:23,270
imagine you are trying to program a
chess game when programming a knight

142
00:02:23,270 --> 00:02:23,280
chess game when programming a knight

143
00:02:23,280 --> 00:02:25,270
chess game when programming a knight
into the game there are plenty of

144
00:02:25,270 --> 00:02:25,280
into the game there are plenty of

145
00:02:25,280 --> 00:02:27,190
into the game there are plenty of
variables that you will need in order

146
00:02:27,190 --> 00:02:27,200
variables that you will need in order

147
00:02:27,200 --> 00:02:29,589
variables that you will need in order
for the piece to work how it should

148
00:02:29,589 --> 00:02:29,599
for the piece to work how it should

149
00:02:29,599 --> 00:02:30,949
for the piece to work how it should
for example

150
00:02:30,949 --> 00:02:30,959
for example

151
00:02:30,959 --> 00:02:32,869
for example
you would need a position variable to

152
00:02:32,869 --> 00:02:32,879
you would need a position variable to

153
00:02:32,879 --> 00:02:35,589
you would need a position variable to
keep track of where the knight is

154
00:02:35,589 --> 00:02:35,599
keep track of where the knight is

155
00:02:35,599 --> 00:02:36,790
keep track of where the knight is
additionally

156
00:02:36,790 --> 00:02:36,800
additionally

157
00:02:36,800 --> 00:02:38,550
additionally
you would need a boolean to represent

158
00:02:38,550 --> 00:02:38,560
you would need a boolean to represent

159
00:02:38,560 --> 00:02:40,390
you would need a boolean to represent
whether the piece has been captured or

160
00:02:40,390 --> 00:02:40,400
whether the piece has been captured or

161
00:02:40,400 --> 00:02:41,270
whether the piece has been captured or
not

162
00:02:41,270 --> 00:02:41,280
not

163
00:02:41,280 --> 00:02:42,710
not
because if it has

164
00:02:42,710 --> 00:02:42,720
because if it has

165
00:02:42,720 --> 00:02:44,550
because if it has
you would not want it to show up

166
00:02:44,550 --> 00:02:44,560
you would not want it to show up

167
00:02:44,560 --> 00:02:47,430
you would not want it to show up
nor should you be able to move with it

168
00:02:47,430 --> 00:02:47,440
nor should you be able to move with it

169
00:02:47,440 --> 00:02:49,110
nor should you be able to move with it
you may also need a variable to

170
00:02:49,110 --> 00:02:49,120
you may also need a variable to

171
00:02:49,120 --> 00:02:51,430
you may also need a variable to
represent which color the knight is

172
00:02:51,430 --> 00:02:51,440
represent which color the knight is

173
00:02:51,440 --> 00:02:54,150
represent which color the knight is
so that the game can treat it correctly

174
00:02:54,150 --> 00:02:54,160
so that the game can treat it correctly

175
00:02:54,160 --> 00:02:55,910
so that the game can treat it correctly
these are just a few of the variables

176
00:02:55,910 --> 00:02:55,920
these are just a few of the variables

177
00:02:55,920 --> 00:02:57,830
these are just a few of the variables
that you would need for one piece

178
00:02:57,830 --> 00:02:57,840
that you would need for one piece

179
00:02:57,840 --> 00:02:59,509
that you would need for one piece
and you would need one of each of these

180
00:02:59,509 --> 00:02:59,519
and you would need one of each of these

181
00:02:59,519 --> 00:03:02,070
and you would need one of each of these
variables for each piece on the board

182
00:03:02,070 --> 00:03:02,080
variables for each piece on the board

183
00:03:02,080 --> 00:03:03,509
variables for each piece on the board
each of which would contain different

184
00:03:03,509 --> 00:03:03,519
each of which would contain different

185
00:03:03,519 --> 00:03:04,790
each of which would contain different
data

186
00:03:04,790 --> 00:03:04,800
data

187
00:03:04,800 --> 00:03:07,110
data
clearly it would be easiest if you could

188
00:03:07,110 --> 00:03:07,120
clearly it would be easiest if you could

189
00:03:07,120 --> 00:03:09,430
clearly it would be easiest if you could
group all of the variables related to

190
00:03:09,430 --> 00:03:09,440
group all of the variables related to

191
00:03:09,440 --> 00:03:12,550
group all of the variables related to
say one of your knights together

192
00:03:12,550 --> 00:03:12,560
say one of your knights together

193
00:03:12,560 --> 00:03:14,309
say one of your knights together
so that you may deal with them as one

194
00:03:14,309 --> 00:03:14,319
so that you may deal with them as one

195
00:03:14,319 --> 00:03:15,830
so that you may deal with them as one
entity

196
00:03:15,830 --> 00:03:15,840
entity

197
00:03:15,840 --> 00:03:17,110
entity
additionally

198
00:03:17,110 --> 00:03:17,120
additionally

199
00:03:17,120 --> 00:03:18,790
additionally
you may want to group your two knights

200
00:03:18,790 --> 00:03:18,800
you may want to group your two knights

201
00:03:18,800 --> 00:03:21,910
you may want to group your two knights
together as they behave similarly

202
00:03:21,910 --> 00:03:21,920
together as they behave similarly

203
00:03:21,920 --> 00:03:23,509
together as they behave similarly
you then may want to group the pieces of

204
00:03:23,509 --> 00:03:23,519
you then may want to group the pieces of

205
00:03:23,519 --> 00:03:25,589
you then may want to group the pieces of
each side together as they would be

206
00:03:25,589 --> 00:03:25,599
each side together as they would be

207
00:03:25,599 --> 00:03:27,430
each side together as they would be
treated differently in reference to each

208
00:03:27,430 --> 00:03:27,440
treated differently in reference to each

209
00:03:27,440 --> 00:03:28,949
treated differently in reference to each
other

210
00:03:28,949 --> 00:03:28,959
other

211
00:03:28,959 --> 00:03:31,509
other
in essence grouping related variables

212
00:03:31,509 --> 00:03:31,519
in essence grouping related variables

213
00:03:31,519 --> 00:03:33,910
in essence grouping related variables
together is almost necessary when it

214
00:03:33,910 --> 00:03:33,920
together is almost necessary when it

215
00:03:33,920 --> 00:03:36,470
together is almost necessary when it
comes to complex programs

216
00:03:36,470 --> 00:03:36,480
comes to complex programs

217
00:03:36,480 --> 00:03:39,190
comes to complex programs
this is where the struct or structure

218
00:03:39,190 --> 00:03:39,200
this is where the struct or structure

219
00:03:39,200 --> 00:03:40,949
this is where the struct or structure
came in

220
00:03:40,949 --> 00:03:40,959
came in

221
00:03:40,959 --> 00:03:42,149
came in
in c

222
00:03:42,149 --> 00:03:42,159
in c

223
00:03:42,159 --> 00:03:44,869
in c
the structure is similar to an array

224
00:03:44,869 --> 00:03:44,879
the structure is similar to an array

225
00:03:44,879 --> 00:03:46,869
the structure is similar to an array
if you don't know what an array is i'd

226
00:03:46,869 --> 00:03:46,879
if you don't know what an array is i'd

227
00:03:46,879 --> 00:03:48,550
if you don't know what an array is i'd
suggest you check out either our

228
00:03:48,550 --> 00:03:48,560
suggest you check out either our

229
00:03:48,560 --> 00:03:50,149
suggest you check out either our
introduction to programming course for

230
00:03:50,149 --> 00:03:50,159
introduction to programming course for

231
00:03:50,159 --> 00:03:51,509
introduction to programming course for
an overview

232
00:03:51,509 --> 00:03:51,519
an overview

233
00:03:51,519 --> 00:03:53,750
an overview
or our data structure series for a more

234
00:03:53,750 --> 00:03:53,760
or our data structure series for a more

235
00:03:53,760 --> 00:03:55,910
or our data structure series for a more
in-depth look at both arrays and many

236
00:03:55,910 --> 00:03:55,920
in-depth look at both arrays and many

237
00:03:55,920 --> 00:03:58,149
in-depth look at both arrays and many
other data structures

238
00:03:58,149 --> 00:03:58,159
other data structures

239
00:03:58,159 --> 00:04:00,470
other data structures
both arrays and structures allow the

240
00:04:00,470 --> 00:04:00,480
both arrays and structures allow the

241
00:04:00,480 --> 00:04:02,470
both arrays and structures allow the
programmer to store several pieces of

242
00:04:02,470 --> 00:04:02,480
programmer to store several pieces of

243
00:04:02,480 --> 00:04:04,070
programmer to store several pieces of
data together

244
00:04:04,070 --> 00:04:04,080
data together

245
00:04:04,080 --> 00:04:06,390
data together
however structures vary from arrays in

246
00:04:06,390 --> 00:04:06,400
however structures vary from arrays in

247
00:04:06,400 --> 00:04:08,229
however structures vary from arrays in
that structures allow the programmer to

248
00:04:08,229 --> 00:04:08,239
that structures allow the programmer to

249
00:04:08,239 --> 00:04:11,270
that structures allow the programmer to
store data of different types together

250
00:04:11,270 --> 00:04:11,280
store data of different types together

251
00:04:11,280 --> 00:04:13,509
store data of different types together
for instance whereas an array would

252
00:04:13,509 --> 00:04:13,519
for instance whereas an array would

253
00:04:13,519 --> 00:04:15,750
for instance whereas an array would
allow you to store only ins or only

254
00:04:15,750 --> 00:04:15,760
allow you to store only ins or only

255
00:04:15,760 --> 00:04:16,949
allow you to store only ins or only
strings

256
00:04:16,949 --> 00:04:16,959
strings

257
00:04:16,959 --> 00:04:19,030
strings
using a structure you could store ins

258
00:04:19,030 --> 00:04:19,040
using a structure you could store ins

259
00:04:19,040 --> 00:04:21,270
using a structure you could store ins
and strings together along with other

260
00:04:21,270 --> 00:04:21,280
and strings together along with other

261
00:04:21,280 --> 00:04:23,189
and strings together along with other
data types

262
00:04:23,189 --> 00:04:23,199
data types

263
00:04:23,199 --> 00:04:24,790
data types
a structure can even store other

264
00:04:24,790 --> 00:04:24,800
a structure can even store other

265
00:04:24,800 --> 00:04:26,550
a structure can even store other
structures within it

266
00:04:26,550 --> 00:04:26,560
structures within it

267
00:04:26,560 --> 00:04:28,469
structures within it
a structure can be very useful in the

268
00:04:28,469 --> 00:04:28,479
a structure can be very useful in the

269
00:04:28,479 --> 00:04:30,550
a structure can be very useful in the
earlier chess example because you could

270
00:04:30,550 --> 00:04:30,560
earlier chess example because you could

271
00:04:30,560 --> 00:04:32,469
earlier chess example because you could
store all of the useful pieces of data

272
00:04:32,469 --> 00:04:32,479
store all of the useful pieces of data

273
00:04:32,479 --> 00:04:34,710
store all of the useful pieces of data
related to the knight in one structure

274
00:04:34,710 --> 00:04:34,720
related to the knight in one structure

275
00:04:34,720 --> 00:04:37,270
related to the knight in one structure
that represents that knight

276
00:04:37,270 --> 00:04:37,280
that represents that knight

277
00:04:37,280 --> 00:04:38,790
that represents that knight
you could then store your knight

278
00:04:38,790 --> 00:04:38,800
you could then store your knight

279
00:04:38,800 --> 00:04:40,790
you could then store your knight
structures together in one structure

280
00:04:40,790 --> 00:04:40,800
structures together in one structure

281
00:04:40,800 --> 00:04:42,870
structures together in one structure
that represents all of the knights and

282
00:04:42,870 --> 00:04:42,880
that represents all of the knights and

283
00:04:42,880 --> 00:04:44,550
that represents all of the knights and
so on

284
00:04:44,550 --> 00:04:44,560
so on

285
00:04:44,560 --> 00:04:46,550
so on
the structure allowed such grouping to

286
00:04:46,550 --> 00:04:46,560
the structure allowed such grouping to

287
00:04:46,560 --> 00:04:48,310
the structure allowed such grouping to
take place beyond what arrays were

288
00:04:48,310 --> 00:04:48,320
take place beyond what arrays were

289
00:04:48,320 --> 00:04:49,749
take place beyond what arrays were
capable of

290
00:04:49,749 --> 00:04:49,759
capable of

291
00:04:49,759 --> 00:04:52,150
capable of
the structure is in many ways the

292
00:04:52,150 --> 00:04:52,160
the structure is in many ways the

293
00:04:52,160 --> 00:04:55,110
the structure is in many ways the
precursor to the object which of course

294
00:04:55,110 --> 00:04:55,120
precursor to the object which of course

295
00:04:55,120 --> 00:04:57,350
precursor to the object which of course
object oriented programming is oriented

296
00:04:57,350 --> 00:04:57,360
object oriented programming is oriented

297
00:04:57,360 --> 00:04:59,030
object oriented programming is oriented
around

298
00:04:59,030 --> 00:04:59,040
around

299
00:04:59,040 --> 00:05:01,029
around
the main issue with using a structure in

300
00:05:01,029 --> 00:05:01,039
the main issue with using a structure in

301
00:05:01,039 --> 00:05:01,990
the main issue with using a structure in
this way

302
00:05:01,990 --> 00:05:02,000
this way

303
00:05:02,000 --> 00:05:03,749
this way
and an issue that objects would come to

304
00:05:03,749 --> 00:05:03,759
and an issue that objects would come to

305
00:05:03,759 --> 00:05:04,790
and an issue that objects would come to
remedy

306
00:05:04,790 --> 00:05:04,800
remedy

307
00:05:04,800 --> 00:05:06,390
remedy
was that you could not define functions

308
00:05:06,390 --> 00:05:06,400
was that you could not define functions

309
00:05:06,400 --> 00:05:07,909
was that you could not define functions
within a structure you could only

310
00:05:07,909 --> 00:05:07,919
within a structure you could only

311
00:05:07,919 --> 00:05:09,350
within a structure you could only
reference them

312
00:05:09,350 --> 00:05:09,360
reference them

313
00:05:09,360 --> 00:05:11,350
reference them
when object-oriented programming came

314
00:05:11,350 --> 00:05:11,360
when object-oriented programming came

315
00:05:11,360 --> 00:05:12,310
when object-oriented programming came
along

316
00:05:12,310 --> 00:05:12,320
along

317
00:05:12,320 --> 00:05:14,230
along
objects allowed you to store data of all

318
00:05:14,230 --> 00:05:14,240
objects allowed you to store data of all

319
00:05:14,240 --> 00:05:17,670
objects allowed you to store data of all
kinds together and additionally define

320
00:05:17,670 --> 00:05:17,680
kinds together and additionally define

321
00:05:17,680 --> 00:05:19,909
kinds together and additionally define
and store functions

322
00:05:19,909 --> 00:05:19,919
and store functions

323
00:05:19,919 --> 00:05:22,070
and store functions
now before we go much further i should

324
00:05:22,070 --> 00:05:22,080
now before we go much further i should

325
00:05:22,080 --> 00:05:24,550
now before we go much further i should
get into exactly what objects are

326
00:05:24,550 --> 00:05:24,560
get into exactly what objects are

327
00:05:24,560 --> 00:05:27,350
get into exactly what objects are
objects are instances of a class

328
00:05:27,350 --> 00:05:27,360
objects are instances of a class

329
00:05:27,360 --> 00:05:29,590
objects are instances of a class
and a class is basically a template for

330
00:05:29,590 --> 00:05:29,600
and a class is basically a template for

331
00:05:29,600 --> 00:05:31,270
and a class is basically a template for
an object

332
00:05:31,270 --> 00:05:31,280
an object

333
00:05:31,280 --> 00:05:33,029
an object
this may seem like a circular way of

334
00:05:33,029 --> 00:05:33,039
this may seem like a circular way of

335
00:05:33,039 --> 00:05:34,870
this may seem like a circular way of
looking at these concepts but allow me

336
00:05:34,870 --> 00:05:34,880
looking at these concepts but allow me

337
00:05:34,880 --> 00:05:36,469
looking at these concepts but allow me
to explain

338
00:05:36,469 --> 00:05:36,479
to explain

339
00:05:36,479 --> 00:05:39,189
to explain
let's say i define a night class

340
00:05:39,189 --> 00:05:39,199
let's say i define a night class

341
00:05:39,199 --> 00:05:41,510
let's say i define a night class
in this class i would define and store

342
00:05:41,510 --> 00:05:41,520
in this class i would define and store

343
00:05:41,520 --> 00:05:44,150
in this class i would define and store
data that is common of all knights

344
00:05:44,150 --> 00:05:44,160
data that is common of all knights

345
00:05:44,160 --> 00:05:46,390
data that is common of all knights
this would be mainly the way that

346
00:05:46,390 --> 00:05:46,400
this would be mainly the way that

347
00:05:46,400 --> 00:05:48,230
this would be mainly the way that
knights are able to move

348
00:05:48,230 --> 00:05:48,240
knights are able to move

349
00:05:48,240 --> 00:05:51,029
knights are able to move
thus in this class i would define a

350
00:05:51,029 --> 00:05:51,039
thus in this class i would define a

351
00:05:51,039 --> 00:05:52,870
thus in this class i would define a
function that uses the knight's current

352
00:05:52,870 --> 00:05:52,880
function that uses the knight's current

353
00:05:52,880 --> 00:05:54,870
function that uses the knight's current
position to return squares that the

354
00:05:54,870 --> 00:05:54,880
position to return squares that the

355
00:05:54,880 --> 00:05:56,629
position to return squares that the
knight can move to

356
00:05:56,629 --> 00:05:56,639
knight can move to

357
00:05:56,639 --> 00:05:59,670
knight can move to
i may also define a position variable

358
00:05:59,670 --> 00:05:59,680
i may also define a position variable

359
00:05:59,680 --> 00:06:02,150
i may also define a position variable
as well as a color variable but i would

360
00:06:02,150 --> 00:06:02,160
as well as a color variable but i would

361
00:06:02,160 --> 00:06:04,230
as well as a color variable but i would
not initialize them

362
00:06:04,230 --> 00:06:04,240
not initialize them

363
00:06:04,240 --> 00:06:06,629
not initialize them
when it comes to specific things such as

364
00:06:06,629 --> 00:06:06,639
when it comes to specific things such as

365
00:06:06,639 --> 00:06:08,469
when it comes to specific things such as
variables that each object under the

366
00:06:08,469 --> 00:06:08,479
variables that each object under the

367
00:06:08,479 --> 00:06:09,350
variables that each object under the
class

368
00:06:09,350 --> 00:06:09,360
class

369
00:06:09,360 --> 00:06:11,510
class
in this case each night would have

370
00:06:11,510 --> 00:06:11,520
in this case each night would have

371
00:06:11,520 --> 00:06:13,909
in this case each night would have
different data for it's best to define

372
00:06:13,909 --> 00:06:13,919
different data for it's best to define

373
00:06:13,919 --> 00:06:16,070
different data for it's best to define
them when i create the object rather

374
00:06:16,070 --> 00:06:16,080
them when i create the object rather

375
00:06:16,080 --> 00:06:18,469
them when i create the object rather
than in the class itself

376
00:06:18,469 --> 00:06:18,479
than in the class itself

377
00:06:18,479 --> 00:06:20,629
than in the class itself
for instance each of the four knights

378
00:06:20,629 --> 00:06:20,639
for instance each of the four knights

379
00:06:20,639 --> 00:06:22,870
for instance each of the four knights
that begin in a game of chess start on

380
00:06:22,870 --> 00:06:22,880
that begin in a game of chess start on

381
00:06:22,880 --> 00:06:25,350
that begin in a game of chess start on
different squares than one another

382
00:06:25,350 --> 00:06:25,360
different squares than one another

383
00:06:25,360 --> 00:06:27,350
different squares than one another
initializing the position variable in

384
00:06:27,350 --> 00:06:27,360
initializing the position variable in

385
00:06:27,360 --> 00:06:29,270
initializing the position variable in
the night class would imply that you

386
00:06:29,270 --> 00:06:29,280
the night class would imply that you

387
00:06:29,280 --> 00:06:31,029
the night class would imply that you
want each knight object created from

388
00:06:31,029 --> 00:06:31,039
want each knight object created from

389
00:06:31,039 --> 00:06:32,870
want each knight object created from
this class to begin with the same

390
00:06:32,870 --> 00:06:32,880
this class to begin with the same

391
00:06:32,880 --> 00:06:35,350
this class to begin with the same
position which you do not

392
00:06:35,350 --> 00:06:35,360
position which you do not

393
00:06:35,360 --> 00:06:36,469
position which you do not
however

394
00:06:36,469 --> 00:06:36,479
however

395
00:06:36,479 --> 00:06:38,150
however
each of the knights would behave the

396
00:06:38,150 --> 00:06:38,160
each of the knights would behave the

397
00:06:38,160 --> 00:06:40,070
each of the knights would behave the
same in terms of the squares it could

398
00:06:40,070 --> 00:06:40,080
same in terms of the squares it could

399
00:06:40,080 --> 00:06:42,469
same in terms of the squares it could
move to based on their position

400
00:06:42,469 --> 00:06:42,479
move to based on their position

401
00:06:42,479 --> 00:06:44,390
move to based on their position
and thus it is best to define a move

402
00:06:44,390 --> 00:06:44,400
and thus it is best to define a move

403
00:06:44,400 --> 00:06:46,550
and thus it is best to define a move
function in the class rather than

404
00:06:46,550 --> 00:06:46,560
function in the class rather than

405
00:06:46,560 --> 00:06:48,390
function in the class rather than
repeating the same function definition

406
00:06:48,390 --> 00:06:48,400
repeating the same function definition

407
00:06:48,400 --> 00:06:52,070
repeating the same function definition
in each object that i create

408
00:06:52,070 --> 00:06:52,080
in each object that i create

409
00:06:52,080 --> 00:06:54,230
in each object that i create
when creating a night object you

410
00:06:54,230 --> 00:06:54,240
when creating a night object you

411
00:06:54,240 --> 00:06:56,309
when creating a night object you
initialize its attributes or its

412
00:06:56,309 --> 00:06:56,319
initialize its attributes or its

413
00:06:56,319 --> 00:06:57,510
initialize its attributes or its
variables

414
00:06:57,510 --> 00:06:57,520
variables

415
00:06:57,520 --> 00:07:00,309
variables
and its methods or its functions to

416
00:07:00,309 --> 00:07:00,319
and its methods or its functions to

417
00:07:00,319 --> 00:07:02,390
and its methods or its functions to
contain information specific to that

418
00:07:02,390 --> 00:07:02,400
contain information specific to that

419
00:07:02,400 --> 00:07:03,589
contain information specific to that
night

420
00:07:03,589 --> 00:07:03,599
night

421
00:07:03,599 --> 00:07:05,830
night
whereas the night class represents any

422
00:07:05,830 --> 00:07:05,840
whereas the night class represents any

423
00:07:05,840 --> 00:07:07,110
whereas the night class represents any
given night

424
00:07:07,110 --> 00:07:07,120
given night

425
00:07:07,120 --> 00:07:09,749
given night
a night object represents one night in

426
00:07:09,749 --> 00:07:09,759
a night object represents one night in

427
00:07:09,759 --> 00:07:11,350
a night object represents one night in
particular

428
00:07:11,350 --> 00:07:11,360
particular

429
00:07:11,360 --> 00:07:13,909
particular
essentially object-oriented programming

430
00:07:13,909 --> 00:07:13,919
essentially object-oriented programming

431
00:07:13,919 --> 00:07:15,990
essentially object-oriented programming
is the best tool us programmers have

432
00:07:15,990 --> 00:07:16,000
is the best tool us programmers have

433
00:07:16,000 --> 00:07:18,870
is the best tool us programmers have
right now to create complex programs by

434
00:07:18,870 --> 00:07:18,880
right now to create complex programs by

435
00:07:18,880 --> 00:07:20,710
right now to create complex programs by
grouping together related data and

436
00:07:20,710 --> 00:07:20,720
grouping together related data and

437
00:07:20,720 --> 00:07:21,909
grouping together related data and
functions

438
00:07:21,909 --> 00:07:21,919
functions

439
00:07:21,919 --> 00:07:23,909
functions
throughout the course of this video we

440
00:07:23,909 --> 00:07:23,919
throughout the course of this video we

441
00:07:23,919 --> 00:07:25,749
throughout the course of this video we
are going to be getting into detail into

442
00:07:25,749 --> 00:07:25,759
are going to be getting into detail into

443
00:07:25,759 --> 00:07:27,670
are going to be getting into detail into
how all of this works using the four

444
00:07:27,670 --> 00:07:27,680
how all of this works using the four

445
00:07:27,680 --> 00:07:29,589
how all of this works using the four
main principles of object-oriented

446
00:07:29,589 --> 00:07:29,599
main principles of object-oriented

447
00:07:29,599 --> 00:07:33,110
main principles of object-oriented
programming those being encapsulation

448
00:07:33,110 --> 00:07:33,120
programming those being encapsulation

449
00:07:33,120 --> 00:07:34,469
programming those being encapsulation
abstraction

450
00:07:34,469 --> 00:07:34,479
abstraction

451
00:07:34,479 --> 00:07:38,550
abstraction
inheritance and polymorphism

452
00:07:38,550 --> 00:07:38,560
inheritance and polymorphism

453
00:07:38,560 --> 00:07:40,550
inheritance and polymorphism
this next section is going to be

454
00:07:40,550 --> 00:07:40,560
this next section is going to be

455
00:07:40,560 --> 00:07:42,469
this next section is going to be
focusing on the first of the four main

456
00:07:42,469 --> 00:07:42,479
focusing on the first of the four main

457
00:07:42,479 --> 00:07:44,390
focusing on the first of the four main
principles of object-oriented

458
00:07:44,390 --> 00:07:44,400
principles of object-oriented

459
00:07:44,400 --> 00:07:45,510
principles of object-oriented
programming

460
00:07:45,510 --> 00:07:45,520
programming

461
00:07:45,520 --> 00:07:47,670
programming
encapsulation

462
00:07:47,670 --> 00:07:47,680
encapsulation

463
00:07:47,680 --> 00:07:50,629
encapsulation
encapsulation refers to bundling data

464
00:07:50,629 --> 00:07:50,639
encapsulation refers to bundling data

465
00:07:50,639 --> 00:07:52,390
encapsulation refers to bundling data
along with methods that can operate on

466
00:07:52,390 --> 00:07:52,400
along with methods that can operate on

467
00:07:52,400 --> 00:07:55,350
along with methods that can operate on
that data within a class

468
00:07:55,350 --> 00:07:55,360
that data within a class

469
00:07:55,360 --> 00:07:57,670
that data within a class
essentially it is the idea of hiding

470
00:07:57,670 --> 00:07:57,680
essentially it is the idea of hiding

471
00:07:57,680 --> 00:07:59,670
essentially it is the idea of hiding
data within a class that anything

472
00:07:59,670 --> 00:07:59,680
data within a class that anything

473
00:07:59,680 --> 00:08:01,749
data within a class that anything
outside that class cannot directly

474
00:08:01,749 --> 00:08:01,759
outside that class cannot directly

475
00:08:01,759 --> 00:08:03,430
outside that class cannot directly
interact with

476
00:08:03,430 --> 00:08:03,440
interact with

477
00:08:03,440 --> 00:08:05,110
interact with
that is not to say that they are unable

478
00:08:05,110 --> 00:08:05,120
that is not to say that they are unable

479
00:08:05,120 --> 00:08:06,710
that is not to say that they are unable
to interact with the separate object's

480
00:08:06,710 --> 00:08:06,720
to interact with the separate object's

481
00:08:06,720 --> 00:08:08,869
to interact with the separate object's
attributes at all however

482
00:08:08,869 --> 00:08:08,879
attributes at all however

483
00:08:08,879 --> 00:08:09,990
attributes at all however
instead

484
00:08:09,990 --> 00:08:10,000
instead

485
00:08:10,000 --> 00:08:11,909
instead
members of other classes looking to

486
00:08:11,909 --> 00:08:11,919
members of other classes looking to

487
00:08:11,919 --> 00:08:13,510
members of other classes looking to
interact with the attributes of an

488
00:08:13,510 --> 00:08:13,520
interact with the attributes of an

489
00:08:13,520 --> 00:08:16,469
interact with the attributes of an
object should only be able to do so

490
00:08:16,469 --> 00:08:16,479
object should only be able to do so

491
00:08:16,479 --> 00:08:19,029
object should only be able to do so
through that class's methods

492
00:08:19,029 --> 00:08:19,039
through that class's methods

493
00:08:19,039 --> 00:08:20,309
through that class's methods
in practice

494
00:08:20,309 --> 00:08:20,319
in practice

495
00:08:20,319 --> 00:08:22,550
in practice
one way this tends to work is by

496
00:08:22,550 --> 00:08:22,560
one way this tends to work is by

497
00:08:22,560 --> 00:08:25,510
one way this tends to work is by
creating getting and setting methods

498
00:08:25,510 --> 00:08:25,520
creating getting and setting methods

499
00:08:25,520 --> 00:08:27,510
creating getting and setting methods
these methods act to either get

500
00:08:27,510 --> 00:08:27,520
these methods act to either get

501
00:08:27,520 --> 00:08:29,830
these methods act to either get
information from an object or set

502
00:08:29,830 --> 00:08:29,840
information from an object or set

503
00:08:29,840 --> 00:08:32,230
information from an object or set
attributes to different values

504
00:08:32,230 --> 00:08:32,240
attributes to different values

505
00:08:32,240 --> 00:08:33,509
attributes to different values
for instance

506
00:08:33,509 --> 00:08:33,519
for instance

507
00:08:33,519 --> 00:08:35,509
for instance
think back to the chess example from the

508
00:08:35,509 --> 00:08:35,519
think back to the chess example from the

509
00:08:35,519 --> 00:08:37,190
think back to the chess example from the
previous section

510
00:08:37,190 --> 00:08:37,200
previous section

511
00:08:37,200 --> 00:08:39,509
previous section
if i was moving one piece and i wanted

512
00:08:39,509 --> 00:08:39,519
if i was moving one piece and i wanted

513
00:08:39,519 --> 00:08:40,949
if i was moving one piece and i wanted
to determine whether it was able to

514
00:08:40,949 --> 00:08:40,959
to determine whether it was able to

515
00:08:40,959 --> 00:08:42,709
to determine whether it was able to
capture another piece

516
00:08:42,709 --> 00:08:42,719
capture another piece

517
00:08:42,719 --> 00:08:45,030
capture another piece
i would need to define a dot get method

518
00:08:45,030 --> 00:08:45,040
i would need to define a dot get method

519
00:08:45,040 --> 00:08:47,430
i would need to define a dot get method
associated with each piece that returns

520
00:08:47,430 --> 00:08:47,440
associated with each piece that returns

521
00:08:47,440 --> 00:08:50,150
associated with each piece that returns
the piece's color in this case piece dot

522
00:08:50,150 --> 00:08:50,160
the piece's color in this case piece dot

523
00:08:50,160 --> 00:08:51,670
the piece's color in this case piece dot
get color

524
00:08:51,670 --> 00:08:51,680
get color

525
00:08:51,680 --> 00:08:52,790
get color
this way

526
00:08:52,790 --> 00:08:52,800
this way

527
00:08:52,800 --> 00:08:54,630
this way
i could check the color of any piece

528
00:08:54,630 --> 00:08:54,640
i could check the color of any piece

529
00:08:54,640 --> 00:08:57,030
i could check the color of any piece
from anywhere in my code without having

530
00:08:57,030 --> 00:08:57,040
from anywhere in my code without having

531
00:08:57,040 --> 00:08:59,110
from anywhere in my code without having
to access the internal attributes of

532
00:08:59,110 --> 00:08:59,120
to access the internal attributes of

533
00:08:59,120 --> 00:09:00,710
to access the internal attributes of
said pieces

534
00:09:00,710 --> 00:09:00,720
said pieces

535
00:09:00,720 --> 00:09:02,550
said pieces
this allows us to retrieve the

536
00:09:02,550 --> 00:09:02,560
this allows us to retrieve the

537
00:09:02,560 --> 00:09:05,990
this allows us to retrieve the
information from where it is defined

538
00:09:05,990 --> 00:09:06,000
information from where it is defined

539
00:09:06,000 --> 00:09:07,269
information from where it is defined
additionally

540
00:09:07,269 --> 00:09:07,279
additionally

541
00:09:07,279 --> 00:09:09,670
additionally
this makes it easiest to keep track of

542
00:09:09,670 --> 00:09:09,680
this makes it easiest to keep track of

543
00:09:09,680 --> 00:09:13,110
this makes it easiest to keep track of
attributes that depend on one another

544
00:09:13,110 --> 00:09:13,120
attributes that depend on one another

545
00:09:13,120 --> 00:09:14,470
attributes that depend on one another
for example

546
00:09:14,470 --> 00:09:14,480
for example

547
00:09:14,480 --> 00:09:16,710
for example
if i was programming a game

548
00:09:16,710 --> 00:09:16,720
if i was programming a game

549
00:09:16,720 --> 00:09:18,790
if i was programming a game
i may have two different attributes for

550
00:09:18,790 --> 00:09:18,800
i may have two different attributes for

551
00:09:18,800 --> 00:09:20,310
i may have two different attributes for
the player's health

552
00:09:20,310 --> 00:09:20,320
the player's health

553
00:09:20,320 --> 00:09:23,750
the player's health
maxhealth and current health

554
00:09:23,750 --> 00:09:23,760
maxhealth and current health

555
00:09:23,760 --> 00:09:25,750
maxhealth and current health
when the character levels up

556
00:09:25,750 --> 00:09:25,760
when the character levels up

557
00:09:25,760 --> 00:09:27,910
when the character levels up
i may have their max health increase as

558
00:09:27,910 --> 00:09:27,920
i may have their max health increase as

559
00:09:27,920 --> 00:09:29,670
i may have their max health increase as
well

560
00:09:29,670 --> 00:09:29,680
well

561
00:09:29,680 --> 00:09:31,110
well
when this happens

562
00:09:31,110 --> 00:09:31,120
when this happens

563
00:09:31,120 --> 00:09:32,870
when this happens
i would want the current health to be

564
00:09:32,870 --> 00:09:32,880
i would want the current health to be

565
00:09:32,880 --> 00:09:35,190
i would want the current health to be
set to the maximum health

566
00:09:35,190 --> 00:09:35,200
set to the maximum health

567
00:09:35,200 --> 00:09:36,949
set to the maximum health
instead of changing both of these values

568
00:09:36,949 --> 00:09:36,959
instead of changing both of these values

569
00:09:36,959 --> 00:09:38,230
instead of changing both of these values
directly

570
00:09:38,230 --> 00:09:38,240
directly

571
00:09:38,240 --> 00:09:40,949
directly
i can define the set max health method

572
00:09:40,949 --> 00:09:40,959
i can define the set max health method

573
00:09:40,959 --> 00:09:43,269
i can define the set max health method
such that the current health is also set

574
00:09:43,269 --> 00:09:43,279
such that the current health is also set

575
00:09:43,279 --> 00:09:45,350
such that the current health is also set
to the maximum health once the maximum

576
00:09:45,350 --> 00:09:45,360
to the maximum health once the maximum

577
00:09:45,360 --> 00:09:47,430
to the maximum health once the maximum
health has increased

578
00:09:47,430 --> 00:09:47,440
health has increased

579
00:09:47,440 --> 00:09:48,790
health has increased
furthermore

580
00:09:48,790 --> 00:09:48,800
furthermore

581
00:09:48,800 --> 00:09:51,030
furthermore
these setting methods allow values to be

582
00:09:51,030 --> 00:09:51,040
these setting methods allow values to be

583
00:09:51,040 --> 00:09:52,470
these setting methods allow values to be
validated

584
00:09:52,470 --> 00:09:52,480
validated

585
00:09:52,480 --> 00:09:53,750
validated
for instance

586
00:09:53,750 --> 00:09:53,760
for instance

587
00:09:53,760 --> 00:09:56,070
for instance
if current health is not able to exceed

588
00:09:56,070 --> 00:09:56,080
if current health is not able to exceed

589
00:09:56,080 --> 00:09:57,750
if current health is not able to exceed
maximum health

590
00:09:57,750 --> 00:09:57,760
maximum health

591
00:09:57,760 --> 00:09:59,670
maximum health
then i would have the set current health

592
00:09:59,670 --> 00:09:59,680
then i would have the set current health

593
00:09:59,680 --> 00:10:02,069
then i would have the set current health
method check if current health would be

594
00:10:02,069 --> 00:10:02,079
method check if current health would be

595
00:10:02,079 --> 00:10:04,550
method check if current health would be
greater to maximum health before making

596
00:10:04,550 --> 00:10:04,560
greater to maximum health before making

597
00:10:04,560 --> 00:10:07,509
greater to maximum health before making
the change

598
00:10:07,509 --> 00:10:07,519


599
00:10:07,519 --> 00:10:10,069


600
00:10:10,069 --> 00:10:10,079
finally you may want some values to be

601
00:10:10,079 --> 00:10:12,550
finally you may want some values to be
read only from outside a class

602
00:10:12,550 --> 00:10:12,560
read only from outside a class

603
00:10:12,560 --> 00:10:13,990
read only from outside a class
which means you would only define a

604
00:10:13,990 --> 00:10:14,000
which means you would only define a

605
00:10:14,000 --> 00:10:17,670
which means you would only define a
getter method and not a center method

606
00:10:17,670 --> 00:10:17,680
getter method and not a center method

607
00:10:17,680 --> 00:10:19,590
getter method and not a center method
for another example

608
00:10:19,590 --> 00:10:19,600
for another example

609
00:10:19,600 --> 00:10:21,910
for another example
let's look back at chess

610
00:10:21,910 --> 00:10:21,920
let's look back at chess

611
00:10:21,920 --> 00:10:24,389
let's look back at chess
when dealing with a piece's position

612
00:10:24,389 --> 00:10:24,399
when dealing with a piece's position

613
00:10:24,399 --> 00:10:26,470
when dealing with a piece's position
you would want to keep track of its rank

614
00:10:26,470 --> 00:10:26,480
you would want to keep track of its rank

615
00:10:26,480 --> 00:10:27,829
you would want to keep track of its rank
or its row

616
00:10:27,829 --> 00:10:27,839
or its row

617
00:10:27,839 --> 00:10:30,949
or its row
and its file or its column

618
00:10:30,949 --> 00:10:30,959
and its file or its column

619
00:10:30,959 --> 00:10:32,949
and its file or its column
when the piece moves you may think it

620
00:10:32,949 --> 00:10:32,959
when the piece moves you may think it

621
00:10:32,959 --> 00:10:35,590
when the piece moves you may think it
would be okay to just set piece.rank and

622
00:10:35,590 --> 00:10:35,600
would be okay to just set piece.rank and

623
00:10:35,600 --> 00:10:38,150
would be okay to just set piece.rank and
piece.file to new values

624
00:10:38,150 --> 00:10:38,160
piece.file to new values

625
00:10:38,160 --> 00:10:39,350
piece.file to new values
however

626
00:10:39,350 --> 00:10:39,360
however

627
00:10:39,360 --> 00:10:41,110
however
as discussed above

628
00:10:41,110 --> 00:10:41,120
as discussed above

629
00:10:41,120 --> 00:10:44,389
as discussed above
this is not the best way to handle it

630
00:10:44,389 --> 00:10:44,399
this is not the best way to handle it

631
00:10:44,399 --> 00:10:46,470
this is not the best way to handle it
it would be better to define a ps.move

632
00:10:46,470 --> 00:10:46,480
it would be better to define a ps.move

633
00:10:46,480 --> 00:10:48,870
it would be better to define a ps.move
function that takes the intended new

634
00:10:48,870 --> 00:10:48,880
function that takes the intended new

635
00:10:48,880 --> 00:10:51,269
function that takes the intended new
position and checks if that is indeed a

636
00:10:51,269 --> 00:10:51,279
position and checks if that is indeed a

637
00:10:51,279 --> 00:10:52,710
position and checks if that is indeed a
valid move

638
00:10:52,710 --> 00:10:52,720
valid move

639
00:10:52,720 --> 00:10:54,870
valid move
the piece would not be able to move if

640
00:10:54,870 --> 00:10:54,880
the piece would not be able to move if

641
00:10:54,880 --> 00:10:57,670
the piece would not be able to move if
say the new location is off the board

642
00:10:57,670 --> 00:10:57,680
say the new location is off the board

643
00:10:57,680 --> 00:10:59,509
say the new location is off the board
a piece of the same color is already on

644
00:10:59,509 --> 00:10:59,519
a piece of the same color is already on

645
00:10:59,519 --> 00:11:00,790
a piece of the same color is already on
that square

646
00:11:00,790 --> 00:11:00,800
that square

647
00:11:00,800 --> 00:11:02,710
that square
or making such a move would put the king

648
00:11:02,710 --> 00:11:02,720
or making such a move would put the king

649
00:11:02,720 --> 00:11:05,350
or making such a move would put the king
of the same color in check

650
00:11:05,350 --> 00:11:05,360
of the same color in check

651
00:11:05,360 --> 00:11:06,550
of the same color in check
additionally

652
00:11:06,550 --> 00:11:06,560
additionally

653
00:11:06,560 --> 00:11:08,150
additionally
other methods may be called from this

654
00:11:08,150 --> 00:11:08,160
other methods may be called from this

655
00:11:08,160 --> 00:11:10,389
other methods may be called from this
move method for instance one that

656
00:11:10,389 --> 00:11:10,399
move method for instance one that

657
00:11:10,399 --> 00:11:12,230
move method for instance one that
captures an enemy piece if it was on

658
00:11:12,230 --> 00:11:12,240
captures an enemy piece if it was on

659
00:11:12,240 --> 00:11:13,350
captures an enemy piece if it was on
that square

660
00:11:13,350 --> 00:11:13,360
that square

661
00:11:13,360 --> 00:11:16,550
that square
or one that puts the enemy king in check

662
00:11:16,550 --> 00:11:16,560
or one that puts the enemy king in check

663
00:11:16,560 --> 00:11:18,630
or one that puts the enemy king in check
were the pieces attributes just to be

664
00:11:18,630 --> 00:11:18,640
were the pieces attributes just to be

665
00:11:18,640 --> 00:11:20,310
were the pieces attributes just to be
directly changed

666
00:11:20,310 --> 00:11:20,320
directly changed

667
00:11:20,320 --> 00:11:22,630
directly changed
you could end up in a strange situation

668
00:11:22,630 --> 00:11:22,640
you could end up in a strange situation

669
00:11:22,640 --> 00:11:24,790
you could end up in a strange situation
where illegal moves are played and

670
00:11:24,790 --> 00:11:24,800
where illegal moves are played and

671
00:11:24,800 --> 00:11:27,509
where illegal moves are played and
pieces occupy the same square

672
00:11:27,509 --> 00:11:27,519
pieces occupy the same square

673
00:11:27,519 --> 00:11:28,710
pieces occupy the same square
essentially

674
00:11:28,710 --> 00:11:28,720
essentially

675
00:11:28,720 --> 00:11:31,590
essentially
getter methods allowing validation can

676
00:11:31,590 --> 00:11:31,600
getter methods allowing validation can

677
00:11:31,600 --> 00:11:33,509
getter methods allowing validation can
be very useful

678
00:11:33,509 --> 00:11:33,519
be very useful

679
00:11:33,519 --> 00:11:36,389
be very useful
encapsulation is useful for a variety of

680
00:11:36,389 --> 00:11:36,399
encapsulation is useful for a variety of

681
00:11:36,399 --> 00:11:37,670
encapsulation is useful for a variety of
reasons

682
00:11:37,670 --> 00:11:37,680
reasons

683
00:11:37,680 --> 00:11:40,310
reasons
as we just went over it is best to not

684
00:11:40,310 --> 00:11:40,320
as we just went over it is best to not

685
00:11:40,320 --> 00:11:43,509
as we just went over it is best to not
allow anything external to directly edit

686
00:11:43,509 --> 00:11:43,519
allow anything external to directly edit

687
00:11:43,519 --> 00:11:45,590
allow anything external to directly edit
an object's attributes

688
00:11:45,590 --> 00:11:45,600
an object's attributes

689
00:11:45,600 --> 00:11:48,150
an object's attributes
this is especially true when working on

690
00:11:48,150 --> 00:11:48,160
this is especially true when working on

691
00:11:48,160 --> 00:11:51,030
this is especially true when working on
large and complex programs where you may

692
00:11:51,030 --> 00:11:51,040
large and complex programs where you may

693
00:11:51,040 --> 00:11:53,350
large and complex programs where you may
want individual pieces of the program to

694
00:11:53,350 --> 00:11:53,360
want individual pieces of the program to

695
00:11:53,360 --> 00:11:56,230
want individual pieces of the program to
work well without requiring them to rely

696
00:11:56,230 --> 00:11:56,240
work well without requiring them to rely

697
00:11:56,240 --> 00:11:59,110
work well without requiring them to rely
on every other section of the code

698
00:11:59,110 --> 00:11:59,120
on every other section of the code

699
00:11:59,120 --> 00:12:00,470
on every other section of the code
in this way

700
00:12:00,470 --> 00:12:00,480
in this way

701
00:12:00,480 --> 00:12:02,790
in this way
preventing each piece of your code from

702
00:12:02,790 --> 00:12:02,800
preventing each piece of your code from

703
00:12:02,800 --> 00:12:05,190
preventing each piece of your code from
referencing and requiring knowledge of

704
00:12:05,190 --> 00:12:05,200
referencing and requiring knowledge of

705
00:12:05,200 --> 00:12:06,870
referencing and requiring knowledge of
the inner workings of each other section

706
00:12:06,870 --> 00:12:06,880
the inner workings of each other section

707
00:12:06,880 --> 00:12:09,509
the inner workings of each other section
of code is very important to keep your

708
00:12:09,509 --> 00:12:09,519
of code is very important to keep your

709
00:12:09,519 --> 00:12:11,110
of code is very important to keep your
program from becoming completely

710
00:12:11,110 --> 00:12:11,120
program from becoming completely

711
00:12:11,120 --> 00:12:13,430
program from becoming completely
entangled in itself

712
00:12:13,430 --> 00:12:13,440
entangled in itself

713
00:12:13,440 --> 00:12:15,430
entangled in itself
this is an idea we will touch upon in

714
00:12:15,430 --> 00:12:15,440
this is an idea we will touch upon in

715
00:12:15,440 --> 00:12:17,190
this is an idea we will touch upon in
future sections to come

716
00:12:17,190 --> 00:12:17,200
future sections to come

717
00:12:17,200 --> 00:12:19,430
future sections to come
but for now it's best to understand that

718
00:12:19,430 --> 00:12:19,440
but for now it's best to understand that

719
00:12:19,440 --> 00:12:21,829
but for now it's best to understand that
information hiding that is keeping one

720
00:12:21,829 --> 00:12:21,839
information hiding that is keeping one

721
00:12:21,839 --> 00:12:23,829
information hiding that is keeping one
class from being able to directly access

722
00:12:23,829 --> 00:12:23,839
class from being able to directly access

723
00:12:23,839 --> 00:12:25,990
class from being able to directly access
the data of another class

724
00:12:25,990 --> 00:12:26,000
the data of another class

725
00:12:26,000 --> 00:12:27,670
the data of another class
is important to keep control of your

726
00:12:27,670 --> 00:12:27,680
is important to keep control of your

727
00:12:27,680 --> 00:12:29,750
is important to keep control of your
program and reducing its overall

728
00:12:29,750 --> 00:12:29,760
program and reducing its overall

729
00:12:29,760 --> 00:12:31,430
program and reducing its overall
complexity

730
00:12:31,430 --> 00:12:31,440
complexity

731
00:12:31,440 --> 00:12:32,470
complexity
overall

732
00:12:32,470 --> 00:12:32,480
overall

733
00:12:32,480 --> 00:12:34,550
overall
encapsulation is a vital component of

734
00:12:34,550 --> 00:12:34,560
encapsulation is a vital component of

735
00:12:34,560 --> 00:12:36,790
encapsulation is a vital component of
object-oriented programming that allows

736
00:12:36,790 --> 00:12:36,800
object-oriented programming that allows

737
00:12:36,800 --> 00:12:38,629
object-oriented programming that allows
the programmer to maintain control of

738
00:12:38,629 --> 00:12:38,639
the programmer to maintain control of

739
00:12:38,639 --> 00:12:39,670
the programmer to maintain control of
their data

740
00:12:39,670 --> 00:12:39,680
their data

741
00:12:39,680 --> 00:12:41,910
their data
and to keep their program from ending up

742
00:12:41,910 --> 00:12:41,920
and to keep their program from ending up

743
00:12:41,920 --> 00:12:47,990
and to keep their program from ending up
in any unwanted states

744
00:12:47,990 --> 00:12:48,000


745
00:12:48,000 --> 00:12:50,230


746
00:12:50,230 --> 00:12:50,240
in this next section we are going to be

747
00:12:50,240 --> 00:12:52,150
in this next section we are going to be
discussing the next of the four main

748
00:12:52,150 --> 00:12:52,160
discussing the next of the four main

749
00:12:52,160 --> 00:12:53,750
discussing the next of the four main
principles of object-oriented

750
00:12:53,750 --> 00:12:53,760
principles of object-oriented

751
00:12:53,760 --> 00:12:56,310
principles of object-oriented
programming abstraction

752
00:12:56,310 --> 00:12:56,320
programming abstraction

753
00:12:56,320 --> 00:12:58,470
programming abstraction
abstraction refers to the idea of only

754
00:12:58,470 --> 00:12:58,480
abstraction refers to the idea of only

755
00:12:58,480 --> 00:13:00,550
abstraction refers to the idea of only
showing essential details and hiding

756
00:13:00,550 --> 00:13:00,560
showing essential details and hiding

757
00:13:00,560 --> 00:13:02,150
showing essential details and hiding
everything else

758
00:13:02,150 --> 00:13:02,160
everything else

759
00:13:02,160 --> 00:13:05,269
everything else
this idea is present in everyday life

760
00:13:05,269 --> 00:13:05,279
this idea is present in everyday life

761
00:13:05,279 --> 00:13:07,590
this idea is present in everyday life
when you drive your car there are some

762
00:13:07,590 --> 00:13:07,600
when you drive your car there are some

763
00:13:07,600 --> 00:13:09,910
when you drive your car there are some
things you need to understand about

764
00:13:09,910 --> 00:13:09,920
things you need to understand about

765
00:13:09,920 --> 00:13:11,670
things you need to understand about
you need to understand how the steering

766
00:13:11,670 --> 00:13:11,680
you need to understand how the steering

767
00:13:11,680 --> 00:13:14,150
you need to understand how the steering
wheel steers the car and how the gas and

768
00:13:14,150 --> 00:13:14,160
wheel steers the car and how the gas and

769
00:13:14,160 --> 00:13:15,829
wheel steers the car and how the gas and
brake pedals work

770
00:13:15,829 --> 00:13:15,839
brake pedals work

771
00:13:15,839 --> 00:13:17,509
brake pedals work
you also need to know how much gas your

772
00:13:17,509 --> 00:13:17,519
you also need to know how much gas your

773
00:13:17,519 --> 00:13:20,629
you also need to know how much gas your
car has and that it needs gas to work

774
00:13:20,629 --> 00:13:20,639
car has and that it needs gas to work

775
00:13:20,639 --> 00:13:22,629
car has and that it needs gas to work
these are necessary details for you to

776
00:13:22,629 --> 00:13:22,639
these are necessary details for you to

777
00:13:22,639 --> 00:13:25,110
these are necessary details for you to
be able to drive the car properly

778
00:13:25,110 --> 00:13:25,120
be able to drive the car properly

779
00:13:25,120 --> 00:13:27,750
be able to drive the car properly
however the exact way that the car works

780
00:13:27,750 --> 00:13:27,760
however the exact way that the car works

781
00:13:27,760 --> 00:13:29,430
however the exact way that the car works
internally isn't something that most

782
00:13:29,430 --> 00:13:29,440
internally isn't something that most

783
00:13:29,440 --> 00:13:31,590
internally isn't something that most
people need to concern themselves with

784
00:13:31,590 --> 00:13:31,600
people need to concern themselves with

785
00:13:31,600 --> 00:13:33,910
people need to concern themselves with
how the gas reacts in the engine and how

786
00:13:33,910 --> 00:13:33,920
how the gas reacts in the engine and how

787
00:13:33,920 --> 00:13:35,430
how the gas reacts in the engine and how
that translates into the car moving

788
00:13:35,430 --> 00:13:35,440
that translates into the car moving

789
00:13:35,440 --> 00:13:37,509
that translates into the car moving
forward really isn't important while you

790
00:13:37,509 --> 00:13:37,519
forward really isn't important while you

791
00:13:37,519 --> 00:13:38,949
forward really isn't important while you
are driving your car

792
00:13:38,949 --> 00:13:38,959
are driving your car

793
00:13:38,959 --> 00:13:40,550
are driving your car
all that matters is that you know it

794
00:13:40,550 --> 00:13:40,560
all that matters is that you know it

795
00:13:40,560 --> 00:13:42,310
all that matters is that you know it
will work this way

796
00:13:42,310 --> 00:13:42,320
will work this way

797
00:13:42,320 --> 00:13:44,230
will work this way
whoever built the car had to worry about

798
00:13:44,230 --> 00:13:44,240
whoever built the car had to worry about

799
00:13:44,240 --> 00:13:46,230
whoever built the car had to worry about
how exactly the car would work so that

800
00:13:46,230 --> 00:13:46,240
how exactly the car would work so that

801
00:13:46,240 --> 00:13:47,670
how exactly the car would work so that
you don't have to

802
00:13:47,670 --> 00:13:47,680
you don't have to

803
00:13:47,680 --> 00:13:50,150
you don't have to
this idea extends to object-oriented

804
00:13:50,150 --> 00:13:50,160
this idea extends to object-oriented

805
00:13:50,160 --> 00:13:51,590
this idea extends to object-oriented
programming

806
00:13:51,590 --> 00:13:51,600
programming

807
00:13:51,600 --> 00:13:53,750
programming
the classes you create should act like

808
00:13:53,750 --> 00:13:53,760
the classes you create should act like

809
00:13:53,760 --> 00:13:55,269
the classes you create should act like
your car

810
00:13:55,269 --> 00:13:55,279
your car

811
00:13:55,279 --> 00:13:57,269
your car
users of your classes should not worry

812
00:13:57,269 --> 00:13:57,279
users of your classes should not worry

813
00:13:57,279 --> 00:13:59,509
users of your classes should not worry
about the exact inner details of said

814
00:13:59,509 --> 00:13:59,519
about the exact inner details of said

815
00:13:59,519 --> 00:14:00,870
about the exact inner details of said
classes

816
00:14:00,870 --> 00:14:00,880
classes

817
00:14:00,880 --> 00:14:02,550
classes
this idea is similar to that of

818
00:14:02,550 --> 00:14:02,560
this idea is similar to that of

819
00:14:02,560 --> 00:14:04,310
this idea is similar to that of
encapsulation that we discussed in the

820
00:14:04,310 --> 00:14:04,320
encapsulation that we discussed in the

821
00:14:04,320 --> 00:14:06,389
encapsulation that we discussed in the
previous section

822
00:14:06,389 --> 00:14:06,399
previous section

823
00:14:06,399 --> 00:14:08,230
previous section
earlier we mentioned how you should not

824
00:14:08,230 --> 00:14:08,240
earlier we mentioned how you should not

825
00:14:08,240 --> 00:14:09,990
earlier we mentioned how you should not
have classes directly interact with the

826
00:14:09,990 --> 00:14:10,000
have classes directly interact with the

827
00:14:10,000 --> 00:14:12,310
have classes directly interact with the
data stored within other classes

828
00:14:12,310 --> 00:14:12,320
data stored within other classes

829
00:14:12,320 --> 00:14:14,230
data stored within other classes
rather have them use the classes methods

830
00:14:14,230 --> 00:14:14,240
rather have them use the classes methods

831
00:14:14,240 --> 00:14:16,389
rather have them use the classes methods
to access their data

832
00:14:16,389 --> 00:14:16,399
to access their data

833
00:14:16,399 --> 00:14:18,389
to access their data
this idea is especially important when

834
00:14:18,389 --> 00:14:18,399
this idea is especially important when

835
00:14:18,399 --> 00:14:19,670
this idea is especially important when
you want to work on your program

836
00:14:19,670 --> 00:14:19,680
you want to work on your program

837
00:14:19,680 --> 00:14:21,750
you want to work on your program
incrementally where you focus on one

838
00:14:21,750 --> 00:14:21,760
incrementally where you focus on one

839
00:14:21,760 --> 00:14:23,189
incrementally where you focus on one
class at a time

840
00:14:23,189 --> 00:14:23,199
class at a time

841
00:14:23,199 --> 00:14:24,870
class at a time
and ensure that it works

842
00:14:24,870 --> 00:14:24,880
and ensure that it works

843
00:14:24,880 --> 00:14:26,870
and ensure that it works
this is a very useful approach as it can

844
00:14:26,870 --> 00:14:26,880
this is a very useful approach as it can

845
00:14:26,880 --> 00:14:28,470
this is a very useful approach as it can
be difficult for you to focus in the big

846
00:14:28,470 --> 00:14:28,480
be difficult for you to focus in the big

847
00:14:28,480 --> 00:14:30,629
be difficult for you to focus in the big
picture while programming and splitting

848
00:14:30,629 --> 00:14:30,639
picture while programming and splitting

849
00:14:30,639 --> 00:14:32,710
picture while programming and splitting
up your project into smaller chunks can

850
00:14:32,710 --> 00:14:32,720
up your project into smaller chunks can

851
00:14:32,720 --> 00:14:35,030
up your project into smaller chunks can
make it much more manageable

852
00:14:35,030 --> 00:14:35,040
make it much more manageable

853
00:14:35,040 --> 00:14:36,389
make it much more manageable
furthermore

854
00:14:36,389 --> 00:14:36,399
furthermore

855
00:14:36,399 --> 00:14:38,870
furthermore
programs nowadays are vast and complex

856
00:14:38,870 --> 00:14:38,880
programs nowadays are vast and complex

857
00:14:38,880 --> 00:14:40,629
programs nowadays are vast and complex
to the point where multiple programmers

858
00:14:40,629 --> 00:14:40,639
to the point where multiple programmers

859
00:14:40,639 --> 00:14:43,350
to the point where multiple programmers
tend to work on one project

860
00:14:43,350 --> 00:14:43,360
tend to work on one project

861
00:14:43,360 --> 00:14:44,629
tend to work on one project
in this case

862
00:14:44,629 --> 00:14:44,639
in this case

863
00:14:44,639 --> 00:14:46,150
in this case
it's best if the section that you are

864
00:14:46,150 --> 00:14:46,160
it's best if the section that you are

865
00:14:46,160 --> 00:14:48,150
it's best if the section that you are
working on is able to function without

866
00:14:48,150 --> 00:14:48,160
working on is able to function without

867
00:14:48,160 --> 00:14:49,829
working on is able to function without
knowledge of the inner workings of your

868
00:14:49,829 --> 00:14:49,839
knowledge of the inner workings of your

869
00:14:49,839 --> 00:14:51,750
knowledge of the inner workings of your
colleague section

870
00:14:51,750 --> 00:14:51,760
colleague section

871
00:14:51,760 --> 00:14:53,829
colleague section
to achieve this it's best to think of

872
00:14:53,829 --> 00:14:53,839
to achieve this it's best to think of

873
00:14:53,839 --> 00:14:56,829
to achieve this it's best to think of
your program in terms of interface and

874
00:14:56,829 --> 00:14:56,839
your program in terms of interface and

875
00:14:56,839 --> 00:14:59,430
your program in terms of interface and
implementation the interface refers to

876
00:14:59,430 --> 00:14:59,440
implementation the interface refers to

877
00:14:59,440 --> 00:15:01,509
implementation the interface refers to
the ways that sections of code are able

878
00:15:01,509 --> 00:15:01,519
the ways that sections of code are able

879
00:15:01,519 --> 00:15:03,910
the ways that sections of code are able
to communicate with one another

880
00:15:03,910 --> 00:15:03,920
to communicate with one another

881
00:15:03,920 --> 00:15:05,670
to communicate with one another
this is typically done through methods

882
00:15:05,670 --> 00:15:05,680
this is typically done through methods

883
00:15:05,680 --> 00:15:08,870
this is typically done through methods
that each class is able to access

884
00:15:08,870 --> 00:15:08,880
that each class is able to access

885
00:15:08,880 --> 00:15:10,629
that each class is able to access
the exact implementation of these

886
00:15:10,629 --> 00:15:10,639
the exact implementation of these

887
00:15:10,639 --> 00:15:13,430
the exact implementation of these
methods or how the methods are coded

888
00:15:13,430 --> 00:15:13,440
methods or how the methods are coded

889
00:15:13,440 --> 00:15:15,509
methods or how the methods are coded
should be hidden within the class and

890
00:15:15,509 --> 00:15:15,519
should be hidden within the class and

891
00:15:15,519 --> 00:15:17,910
should be hidden within the class and
not accessible from the outside

892
00:15:17,910 --> 00:15:17,920
not accessible from the outside

893
00:15:17,920 --> 00:15:19,829
not accessible from the outside
think of this like the car

894
00:15:19,829 --> 00:15:19,839
think of this like the car

895
00:15:19,839 --> 00:15:21,670
think of this like the car
the other classes are able to turn the

896
00:15:21,670 --> 00:15:21,680
the other classes are able to turn the

897
00:15:21,680 --> 00:15:23,430
the other classes are able to turn the
wheel and push the gas

898
00:15:23,430 --> 00:15:23,440
wheel and push the gas

899
00:15:23,440 --> 00:15:25,189
wheel and push the gas
and they know what the outcome should be

900
00:15:25,189 --> 00:15:25,199
and they know what the outcome should be

901
00:15:25,199 --> 00:15:27,030
and they know what the outcome should be
without caring about exactly how this

902
00:15:27,030 --> 00:15:27,040
without caring about exactly how this

903
00:15:27,040 --> 00:15:29,350
without caring about exactly how this
gets done

904
00:15:29,350 --> 00:15:29,360
gets done

905
00:15:29,360 --> 00:15:31,269
gets done
let's return to the chess example that

906
00:15:31,269 --> 00:15:31,279
let's return to the chess example that

907
00:15:31,279 --> 00:15:33,990
let's return to the chess example that
we've been using throughout the video

908
00:15:33,990 --> 00:15:34,000
we've been using throughout the video

909
00:15:34,000 --> 00:15:35,509
we've been using throughout the video
let's say that you are working on making

910
00:15:35,509 --> 00:15:35,519
let's say that you are working on making

911
00:15:35,519 --> 00:15:37,829
let's say that you are working on making
the night work as it should and a fellow

912
00:15:37,829 --> 00:15:37,839
the night work as it should and a fellow

913
00:15:37,839 --> 00:15:41,189
the night work as it should and a fellow
programmer is working in the king class

914
00:15:41,189 --> 00:15:41,199
programmer is working in the king class

915
00:15:41,199 --> 00:15:43,670
programmer is working in the king class
in order to effectively work together

916
00:15:43,670 --> 00:15:43,680
in order to effectively work together

917
00:15:43,680 --> 00:15:45,990
in order to effectively work together
you need to agree on an interface with

918
00:15:45,990 --> 00:15:46,000
you need to agree on an interface with

919
00:15:46,000 --> 00:15:47,670
you need to agree on an interface with
which these pieces are able to

920
00:15:47,670 --> 00:15:47,680
which these pieces are able to

921
00:15:47,680 --> 00:15:49,350
which these pieces are able to
communicate

922
00:15:49,350 --> 00:15:49,360
communicate

923
00:15:49,360 --> 00:15:50,710
communicate
in this case

924
00:15:50,710 --> 00:15:50,720
in this case

925
00:15:50,720 --> 00:15:52,150
in this case
say that you are working on making the

926
00:15:52,150 --> 00:15:52,160
say that you are working on making the

927
00:15:52,160 --> 00:15:54,310
say that you are working on making the
knight unable to move if your king is in

928
00:15:54,310 --> 00:15:54,320
knight unable to move if your king is in

929
00:15:54,320 --> 00:15:55,829
knight unable to move if your king is in
check

930
00:15:55,829 --> 00:15:55,839
check

931
00:15:55,839 --> 00:15:58,230
check
as the programmer of the night class

932
00:15:58,230 --> 00:15:58,240
as the programmer of the night class

933
00:15:58,240 --> 00:16:00,150
as the programmer of the night class
you make the knight use the king's

934
00:16:00,150 --> 00:16:00,160
you make the knight use the king's

935
00:16:00,160 --> 00:16:02,310
you make the knight use the king's
getter method that will let the knight

936
00:16:02,310 --> 00:16:02,320
getter method that will let the knight

937
00:16:02,320 --> 00:16:05,590
getter method that will let the knight
know whether or not the king is in check

938
00:16:05,590 --> 00:16:05,600
know whether or not the king is in check

939
00:16:05,600 --> 00:16:06,949
know whether or not the king is in check
if it is

940
00:16:06,949 --> 00:16:06,959
if it is

941
00:16:06,959 --> 00:16:08,629
if it is
then you make it so the knight is not

942
00:16:08,629 --> 00:16:08,639
then you make it so the knight is not

943
00:16:08,639 --> 00:16:10,710
then you make it so the knight is not
able to move unless it is able to put

944
00:16:10,710 --> 00:16:10,720
able to move unless it is able to put

945
00:16:10,720 --> 00:16:12,710
able to move unless it is able to put
the king out of check

946
00:16:12,710 --> 00:16:12,720
the king out of check

947
00:16:12,720 --> 00:16:14,870
the king out of check
as you program the night class you

948
00:16:14,870 --> 00:16:14,880
as you program the night class you

949
00:16:14,880 --> 00:16:16,310
as you program the night class you
should not be concerned with how the

950
00:16:16,310 --> 00:16:16,320
should not be concerned with how the

951
00:16:16,320 --> 00:16:18,310
should not be concerned with how the
king is determining whether or not it is

952
00:16:18,310 --> 00:16:18,320
king is determining whether or not it is

953
00:16:18,320 --> 00:16:19,509
king is determining whether or not it is
in check

954
00:16:19,509 --> 00:16:19,519
in check

955
00:16:19,519 --> 00:16:21,350
in check
the king's method that tells the knight

956
00:16:21,350 --> 00:16:21,360
the king's method that tells the knight

957
00:16:21,360 --> 00:16:22,949
the king's method that tells the knight
whether or not it is in check is part of

958
00:16:22,949 --> 00:16:22,959
whether or not it is in check is part of

959
00:16:22,959 --> 00:16:24,230
whether or not it is in check is part of
the interface

960
00:16:24,230 --> 00:16:24,240
the interface

961
00:16:24,240 --> 00:16:26,790
the interface
but how exactly it does that is part of

962
00:16:26,790 --> 00:16:26,800
but how exactly it does that is part of

963
00:16:26,800 --> 00:16:28,629
but how exactly it does that is part of
the implementation

964
00:16:28,629 --> 00:16:28,639
the implementation

965
00:16:28,639 --> 00:16:31,110
the implementation
this manner of only allowing the classes

966
00:16:31,110 --> 00:16:31,120
this manner of only allowing the classes

967
00:16:31,120 --> 00:16:33,030
this manner of only allowing the classes
to interact through a predetermined

968
00:16:33,030 --> 00:16:33,040
to interact through a predetermined

969
00:16:33,040 --> 00:16:34,069
to interact through a predetermined
interface

970
00:16:34,069 --> 00:16:34,079
interface

971
00:16:34,079 --> 00:16:36,470
interface
prevents different pieces of the program

972
00:16:36,470 --> 00:16:36,480
prevents different pieces of the program

973
00:16:36,480 --> 00:16:38,150
prevents different pieces of the program
from becoming completely coupled

974
00:16:38,150 --> 00:16:38,160
from becoming completely coupled

975
00:16:38,160 --> 00:16:39,829
from becoming completely coupled
together

976
00:16:39,829 --> 00:16:39,839
together

977
00:16:39,839 --> 00:16:41,990
together
if the night class has to look into the

978
00:16:41,990 --> 00:16:42,000
if the night class has to look into the

979
00:16:42,000 --> 00:16:43,509
if the night class has to look into the
king class in order to make a

980
00:16:43,509 --> 00:16:43,519
king class in order to make a

981
00:16:43,519 --> 00:16:45,110
king class in order to make a
determination

982
00:16:45,110 --> 00:16:45,120
determination

983
00:16:45,120 --> 00:16:46,949
determination
then it is reliant on the king class

984
00:16:46,949 --> 00:16:46,959
then it is reliant on the king class

985
00:16:46,959 --> 00:16:49,110
then it is reliant on the king class
being set up in a certain way in order

986
00:16:49,110 --> 00:16:49,120
being set up in a certain way in order

987
00:16:49,120 --> 00:16:51,110
being set up in a certain way in order
to function

988
00:16:51,110 --> 00:16:51,120
to function

989
00:16:51,120 --> 00:16:53,189
to function
if the king clash is changed or

990
00:16:53,189 --> 00:16:53,199
if the king clash is changed or

991
00:16:53,199 --> 00:16:56,310
if the king clash is changed or
reorganized or its data is renamed

992
00:16:56,310 --> 00:16:56,320
reorganized or its data is renamed

993
00:16:56,320 --> 00:16:58,069
reorganized or its data is renamed
then the night class would no longer

994
00:16:58,069 --> 00:16:58,079
then the night class would no longer

995
00:16:58,079 --> 00:17:01,350
then the night class would no longer
work and it too would have to be changed

996
00:17:01,350 --> 00:17:01,360
work and it too would have to be changed

997
00:17:01,360 --> 00:17:03,110
work and it too would have to be changed
assuming the rest of the program was

998
00:17:03,110 --> 00:17:03,120
assuming the rest of the program was

999
00:17:03,120 --> 00:17:04,870
assuming the rest of the program was
coded in this way

1000
00:17:04,870 --> 00:17:04,880
coded in this way

1001
00:17:04,880 --> 00:17:07,429
coded in this way
then many other classes would also have

1002
00:17:07,429 --> 00:17:07,439
then many other classes would also have

1003
00:17:07,439 --> 00:17:09,350
then many other classes would also have
to be modified

1004
00:17:09,350 --> 00:17:09,360
to be modified

1005
00:17:09,360 --> 00:17:11,510
to be modified
creating a set interface through which

1006
00:17:11,510 --> 00:17:11,520
creating a set interface through which

1007
00:17:11,520 --> 00:17:13,829
creating a set interface through which
classes can interact with one another

1008
00:17:13,829 --> 00:17:13,839
classes can interact with one another

1009
00:17:13,839 --> 00:17:15,990
classes can interact with one another
ensures that each individual piece can

1010
00:17:15,990 --> 00:17:16,000
ensures that each individual piece can

1011
00:17:16,000 --> 00:17:18,390
ensures that each individual piece can
be changed without creating a ripple

1012
00:17:18,390 --> 00:17:18,400
be changed without creating a ripple

1013
00:17:18,400 --> 00:17:20,710
be changed without creating a ripple
effect that causes the entire program to

1014
00:17:20,710 --> 00:17:20,720
effect that causes the entire program to

1015
00:17:20,720 --> 00:17:23,909
effect that causes the entire program to
have the change in response

1016
00:17:23,909 --> 00:17:23,919
have the change in response

1017
00:17:23,919 --> 00:17:26,150
have the change in response
overall it's best to keep in mind

1018
00:17:26,150 --> 00:17:26,160
overall it's best to keep in mind

1019
00:17:26,160 --> 00:17:28,470
overall it's best to keep in mind
abstraction when writing object oriented

1020
00:17:28,470 --> 00:17:28,480
abstraction when writing object oriented

1021
00:17:28,480 --> 00:17:29,350
abstraction when writing object oriented
code

1022
00:17:29,350 --> 00:17:29,360
code

1023
00:17:29,360 --> 00:17:31,350
code
as it allows the program to be worked on

1024
00:17:31,350 --> 00:17:31,360
as it allows the program to be worked on

1025
00:17:31,360 --> 00:17:33,270
as it allows the program to be worked on
incrementally and prevents it from

1026
00:17:33,270 --> 00:17:33,280
incrementally and prevents it from

1027
00:17:33,280 --> 00:17:35,750
incrementally and prevents it from
becoming completely entangled in itself

1028
00:17:35,750 --> 00:17:35,760
becoming completely entangled in itself

1029
00:17:35,760 --> 00:17:37,990
becoming completely entangled in itself
and very complex

1030
00:17:37,990 --> 00:17:38,000
and very complex

1031
00:17:38,000 --> 00:17:39,909
and very complex
determine specific points of contact

1032
00:17:39,909 --> 00:17:39,919
determine specific points of contact

1033
00:17:39,919 --> 00:17:41,669
determine specific points of contact
that can act as the interface between

1034
00:17:41,669 --> 00:17:41,679
that can act as the interface between

1035
00:17:41,679 --> 00:17:42,789
that can act as the interface between
classes

1036
00:17:42,789 --> 00:17:42,799
classes

1037
00:17:42,799 --> 00:17:44,789
classes
and only worry about the implementation

1038
00:17:44,789 --> 00:17:44,799
and only worry about the implementation

1039
00:17:44,799 --> 00:17:51,270
and only worry about the implementation
behind it when working on that section

1040
00:17:51,270 --> 00:17:51,280


1041
00:17:51,280 --> 00:17:53,270


1042
00:17:53,270 --> 00:17:53,280
this next section will be tackling

1043
00:17:53,280 --> 00:17:54,630
this next section will be tackling
inheritance

1044
00:17:54,630 --> 00:17:54,640
inheritance

1045
00:17:54,640 --> 00:17:56,549
inheritance
the third of the main principles of

1046
00:17:56,549 --> 00:17:56,559
the third of the main principles of

1047
00:17:56,559 --> 00:17:59,270
the third of the main principles of
object oriented programming

1048
00:17:59,270 --> 00:17:59,280
object oriented programming

1049
00:17:59,280 --> 00:18:01,190
object oriented programming
inheritance is the principle that allows

1050
00:18:01,190 --> 00:18:01,200
inheritance is the principle that allows

1051
00:18:01,200 --> 00:18:04,549
inheritance is the principle that allows
you to derive classes from other classes

1052
00:18:04,549 --> 00:18:04,559
you to derive classes from other classes

1053
00:18:04,559 --> 00:18:07,510
you to derive classes from other classes
classes can inherit certain methods and

1054
00:18:07,510 --> 00:18:07,520
classes can inherit certain methods and

1055
00:18:07,520 --> 00:18:10,150
classes can inherit certain methods and
attributes from another class

1056
00:18:10,150 --> 00:18:10,160
attributes from another class

1057
00:18:10,160 --> 00:18:12,390
attributes from another class
we will get into exactly what this means

1058
00:18:12,390 --> 00:18:12,400
we will get into exactly what this means

1059
00:18:12,400 --> 00:18:14,870
we will get into exactly what this means
in a moment but first let's look at an

1060
00:18:14,870 --> 00:18:14,880
in a moment but first let's look at an

1061
00:18:14,880 --> 00:18:16,549
in a moment but first let's look at an
example

1062
00:18:16,549 --> 00:18:16,559
example

1063
00:18:16,559 --> 00:18:19,029
example
let's say you are programming a game

1064
00:18:19,029 --> 00:18:19,039
let's say you are programming a game

1065
00:18:19,039 --> 00:18:21,430
let's say you are programming a game
in this game the player has access to

1066
00:18:21,430 --> 00:18:21,440
in this game the player has access to

1067
00:18:21,440 --> 00:18:24,230
in this game the player has access to
weapons to fight their enemies

1068
00:18:24,230 --> 00:18:24,240
weapons to fight their enemies

1069
00:18:24,240 --> 00:18:26,870
weapons to fight their enemies
to begin you may establish a weapons

1070
00:18:26,870 --> 00:18:26,880
to begin you may establish a weapons

1071
00:18:26,880 --> 00:18:29,750
to begin you may establish a weapons
class this class would contain many of

1072
00:18:29,750 --> 00:18:29,760
class this class would contain many of

1073
00:18:29,760 --> 00:18:31,830
class this class would contain many of
the pertinent attributes and methods

1074
00:18:31,830 --> 00:18:31,840
the pertinent attributes and methods

1075
00:18:31,840 --> 00:18:33,510
the pertinent attributes and methods
common to weapons

1076
00:18:33,510 --> 00:18:33,520
common to weapons

1077
00:18:33,520 --> 00:18:35,110
common to weapons
for instance an attribute that

1078
00:18:35,110 --> 00:18:35,120
for instance an attribute that

1079
00:18:35,120 --> 00:18:36,789
for instance an attribute that
represents the damage that the weapon

1080
00:18:36,789 --> 00:18:36,799
represents the damage that the weapon

1081
00:18:36,799 --> 00:18:37,750
represents the damage that the weapon
deals

1082
00:18:37,750 --> 00:18:37,760
deals

1083
00:18:37,760 --> 00:18:39,430
deals
and a method that deals damage to an

1084
00:18:39,430 --> 00:18:39,440
and a method that deals damage to an

1085
00:18:39,440 --> 00:18:41,750
and a method that deals damage to an
opponent when called

1086
00:18:41,750 --> 00:18:41,760
opponent when called

1087
00:18:41,760 --> 00:18:43,510
opponent when called
you then would want some more classes to

1088
00:18:43,510 --> 00:18:43,520
you then would want some more classes to

1089
00:18:43,520 --> 00:18:46,070
you then would want some more classes to
represent specific weapons such as a

1090
00:18:46,070 --> 00:18:46,080
represent specific weapons such as a

1091
00:18:46,080 --> 00:18:47,990
represent specific weapons such as a
sword or a club

1092
00:18:47,990 --> 00:18:48,000
sword or a club

1093
00:18:48,000 --> 00:18:50,070
sword or a club
these classes would act differently from

1094
00:18:50,070 --> 00:18:50,080
these classes would act differently from

1095
00:18:50,080 --> 00:18:52,470
these classes would act differently from
one another as swords and clubs have

1096
00:18:52,470 --> 00:18:52,480
one another as swords and clubs have

1097
00:18:52,480 --> 00:18:54,630
one another as swords and clubs have
certain different attributes such as a

1098
00:18:54,630 --> 00:18:54,640
certain different attributes such as a

1099
00:18:54,640 --> 00:18:56,390
certain different attributes such as a
sword being made for cutting

1100
00:18:56,390 --> 00:18:56,400
sword being made for cutting

1101
00:18:56,400 --> 00:18:58,789
sword being made for cutting
whereas a club is blunt

1102
00:18:58,789 --> 00:18:58,799
whereas a club is blunt

1103
00:18:58,799 --> 00:19:01,029
whereas a club is blunt
these differences would be represented

1104
00:19:01,029 --> 00:19:01,039
these differences would be represented

1105
00:19:01,039 --> 00:19:03,590
these differences would be represented
in different values for their attributes

1106
00:19:03,590 --> 00:19:03,600
in different values for their attributes

1107
00:19:03,600 --> 00:19:05,669
in different values for their attributes
as well as possibly different attributes

1108
00:19:05,669 --> 00:19:05,679
as well as possibly different attributes

1109
00:19:05,679 --> 00:19:07,110
as well as possibly different attributes
altogether

1110
00:19:07,110 --> 00:19:07,120
altogether

1111
00:19:07,120 --> 00:19:08,150
altogether
however

1112
00:19:08,150 --> 00:19:08,160
however

1113
00:19:08,160 --> 00:19:10,710
however
they do share much of the same behavior

1114
00:19:10,710 --> 00:19:10,720
they do share much of the same behavior

1115
00:19:10,720 --> 00:19:12,870
they do share much of the same behavior
as they are both members of the weapons

1116
00:19:12,870 --> 00:19:12,880
as they are both members of the weapons

1117
00:19:12,880 --> 00:19:14,150
as they are both members of the weapons
class

1118
00:19:14,150 --> 00:19:14,160
class

1119
00:19:14,160 --> 00:19:15,590
class
in this case

1120
00:19:15,590 --> 00:19:15,600
in this case

1121
00:19:15,600 --> 00:19:18,390
in this case
the weapon class would be the superclass

1122
00:19:18,390 --> 00:19:18,400
the weapon class would be the superclass

1123
00:19:18,400 --> 00:19:20,390
the weapon class would be the superclass
and the sword and club classes that

1124
00:19:20,390 --> 00:19:20,400
and the sword and club classes that

1125
00:19:20,400 --> 00:19:22,310
and the sword and club classes that
extend the weapon class would be

1126
00:19:22,310 --> 00:19:22,320
extend the weapon class would be

1127
00:19:22,320 --> 00:19:25,190
extend the weapon class would be
subclasses in relation to it

1128
00:19:25,190 --> 00:19:25,200
subclasses in relation to it

1129
00:19:25,200 --> 00:19:27,590
subclasses in relation to it
many of the attributes and methods

1130
00:19:27,590 --> 00:19:27,600
many of the attributes and methods

1131
00:19:27,600 --> 00:19:30,070
many of the attributes and methods
associated with the weapon class would

1132
00:19:30,070 --> 00:19:30,080
associated with the weapon class would

1133
00:19:30,080 --> 00:19:33,669
associated with the weapon class would
also be present in its subclasses

1134
00:19:33,669 --> 00:19:33,679
also be present in its subclasses

1135
00:19:33,679 --> 00:19:36,470
also be present in its subclasses
any given sword or club would also want

1136
00:19:36,470 --> 00:19:36,480
any given sword or club would also want

1137
00:19:36,480 --> 00:19:38,390
any given sword or club would also want
access to the methods that allow them to

1138
00:19:38,390 --> 00:19:38,400
access to the methods that allow them to

1139
00:19:38,400 --> 00:19:39,750
access to the methods that allow them to
deal damage

1140
00:19:39,750 --> 00:19:39,760
deal damage

1141
00:19:39,760 --> 00:19:41,590
deal damage
as well as the attributes that detail

1142
00:19:41,590 --> 00:19:41,600
as well as the attributes that detail

1143
00:19:41,600 --> 00:19:43,750
as well as the attributes that detail
how much and what type of damage they

1144
00:19:43,750 --> 00:19:43,760
how much and what type of damage they

1145
00:19:43,760 --> 00:19:45,270
how much and what type of damage they
deal

1146
00:19:45,270 --> 00:19:45,280
deal

1147
00:19:45,280 --> 00:19:47,350
deal
the class hierarchy does not tend to be

1148
00:19:47,350 --> 00:19:47,360
the class hierarchy does not tend to be

1149
00:19:47,360 --> 00:19:49,110
the class hierarchy does not tend to be
so small however

1150
00:19:49,110 --> 00:19:49,120
so small however

1151
00:19:49,120 --> 00:19:51,270
so small however
as in most cases there are many more

1152
00:19:51,270 --> 00:19:51,280
as in most cases there are many more

1153
00:19:51,280 --> 00:19:53,510
as in most cases there are many more
layers than just one superclass and a

1154
00:19:53,510 --> 00:19:53,520
layers than just one superclass and a

1155
00:19:53,520 --> 00:19:55,990
layers than just one superclass and a
couple of subclasses

1156
00:19:55,990 --> 00:19:56,000
couple of subclasses

1157
00:19:56,000 --> 00:19:58,150
couple of subclasses
the weapon class may be a subclass to a

1158
00:19:58,150 --> 00:19:58,160
the weapon class may be a subclass to a

1159
00:19:58,160 --> 00:19:59,990
the weapon class may be a subclass to a
broader items class

1160
00:19:59,990 --> 00:20:00,000
broader items class

1161
00:20:00,000 --> 00:20:01,270
broader items class
which could contain many other

1162
00:20:01,270 --> 00:20:01,280
which could contain many other

1163
00:20:01,280 --> 00:20:04,830
which could contain many other
subclasses with subclasses of their own

1164
00:20:04,830 --> 00:20:04,840
subclasses with subclasses of their own

1165
00:20:04,840 --> 00:20:07,110
subclasses with subclasses of their own
additionally you may include a wider

1166
00:20:07,110 --> 00:20:07,120
additionally you may include a wider

1167
00:20:07,120 --> 00:20:09,110
additionally you may include a wider
variety of weapons than just swords and

1168
00:20:09,110 --> 00:20:09,120
variety of weapons than just swords and

1169
00:20:09,120 --> 00:20:10,230
variety of weapons than just swords and
clubs

1170
00:20:10,230 --> 00:20:10,240
clubs

1171
00:20:10,240 --> 00:20:13,190
clubs
as well as multiple types of swords that

1172
00:20:13,190 --> 00:20:13,200
as well as multiple types of swords that

1173
00:20:13,200 --> 00:20:15,510
as well as multiple types of swords that
would require different behaviors and

1174
00:20:15,510 --> 00:20:15,520
would require different behaviors and

1175
00:20:15,520 --> 00:20:18,149
would require different behaviors and
thus their own subclasses

1176
00:20:18,149 --> 00:20:18,159
thus their own subclasses

1177
00:20:18,159 --> 00:20:20,070
thus their own subclasses
when you are writing object-oriented

1178
00:20:20,070 --> 00:20:20,080
when you are writing object-oriented

1179
00:20:20,080 --> 00:20:21,350
when you are writing object-oriented
code

1180
00:20:21,350 --> 00:20:21,360
code

1181
00:20:21,360 --> 00:20:23,990
code
many of the classes you create will fit

1182
00:20:23,990 --> 00:20:24,000
many of the classes you create will fit

1183
00:20:24,000 --> 00:20:26,870
many of the classes you create will fit
somewhere in the broader class hierarchy

1184
00:20:26,870 --> 00:20:26,880
somewhere in the broader class hierarchy

1185
00:20:26,880 --> 00:20:28,950
somewhere in the broader class hierarchy
which acts as a web of classes with

1186
00:20:28,950 --> 00:20:28,960
which acts as a web of classes with

1187
00:20:28,960 --> 00:20:31,750
which acts as a web of classes with
different relationships to one another

1188
00:20:31,750 --> 00:20:31,760
different relationships to one another

1189
00:20:31,760 --> 00:20:33,990
different relationships to one another
the next important topic to cover in

1190
00:20:33,990 --> 00:20:34,000
the next important topic to cover in

1191
00:20:34,000 --> 00:20:36,390
the next important topic to cover in
terms of inheritance is the access

1192
00:20:36,390 --> 00:20:36,400
terms of inheritance is the access

1193
00:20:36,400 --> 00:20:38,710
terms of inheritance is the access
modifiers that change which classes

1194
00:20:38,710 --> 00:20:38,720
modifiers that change which classes

1195
00:20:38,720 --> 00:20:41,510
modifiers that change which classes
access which attributes methods or even

1196
00:20:41,510 --> 00:20:41,520
access which attributes methods or even

1197
00:20:41,520 --> 00:20:43,909
access which attributes methods or even
classes as a whole

1198
00:20:43,909 --> 00:20:43,919
classes as a whole

1199
00:20:43,919 --> 00:20:46,070
classes as a whole
there are three main access modifiers

1200
00:20:46,070 --> 00:20:46,080
there are three main access modifiers

1201
00:20:46,080 --> 00:20:48,230
there are three main access modifiers
that we will be discussing

1202
00:20:48,230 --> 00:20:48,240
that we will be discussing

1203
00:20:48,240 --> 00:20:49,430
that we will be discussing
public

1204
00:20:49,430 --> 00:20:49,440
public

1205
00:20:49,440 --> 00:20:50,470
public
private

1206
00:20:50,470 --> 00:20:50,480
private

1207
00:20:50,480 --> 00:20:52,149
private
and protected

1208
00:20:52,149 --> 00:20:52,159
and protected

1209
00:20:52,159 --> 00:20:55,190
and protected
let's begin with the public modifier

1210
00:20:55,190 --> 00:20:55,200
let's begin with the public modifier

1211
00:20:55,200 --> 00:20:57,430
let's begin with the public modifier
public is probably the most simple of

1212
00:20:57,430 --> 00:20:57,440
public is probably the most simple of

1213
00:20:57,440 --> 00:20:59,510
public is probably the most simple of
the modifiers

1214
00:20:59,510 --> 00:20:59,520
the modifiers

1215
00:20:59,520 --> 00:21:02,310
the modifiers
a public member or class can be accessed

1216
00:21:02,310 --> 00:21:02,320
a public member or class can be accessed

1217
00:21:02,320 --> 00:21:03,909
a public member or class can be accessed
from anywhere

1218
00:21:03,909 --> 00:21:03,919
from anywhere

1219
00:21:03,919 --> 00:21:06,230
from anywhere
this includes any superclasses

1220
00:21:06,230 --> 00:21:06,240
this includes any superclasses

1221
00:21:06,240 --> 00:21:08,470
this includes any superclasses
subclasses or anywhere else in the

1222
00:21:08,470 --> 00:21:08,480
subclasses or anywhere else in the

1223
00:21:08,480 --> 00:21:09,830
subclasses or anywhere else in the
program

1224
00:21:09,830 --> 00:21:09,840
program

1225
00:21:09,840 --> 00:21:11,990
program
this is very useful when you need to

1226
00:21:11,990 --> 00:21:12,000
this is very useful when you need to

1227
00:21:12,000 --> 00:21:14,390
this is very useful when you need to
have access from a wide variety of

1228
00:21:14,390 --> 00:21:14,400
have access from a wide variety of

1229
00:21:14,400 --> 00:21:16,630
have access from a wide variety of
places in your program

1230
00:21:16,630 --> 00:21:16,640
places in your program

1231
00:21:16,640 --> 00:21:19,029
places in your program
to better understand this modifier and

1232
00:21:19,029 --> 00:21:19,039
to better understand this modifier and

1233
00:21:19,039 --> 00:21:20,390
to better understand this modifier and
those to come

1234
00:21:20,390 --> 00:21:20,400
those to come

1235
00:21:20,400 --> 00:21:22,630
those to come
look to the example class hierarchy on

1236
00:21:22,630 --> 00:21:22,640
look to the example class hierarchy on

1237
00:21:22,640 --> 00:21:25,669
look to the example class hierarchy on
screen that represents different foods

1238
00:21:25,669 --> 00:21:25,679
screen that represents different foods

1239
00:21:25,679 --> 00:21:28,070
screen that represents different foods
for each example the member in question

1240
00:21:28,070 --> 00:21:28,080
for each example the member in question

1241
00:21:28,080 --> 00:21:30,470
for each example the member in question
will be defined in the fruit class

1242
00:21:30,470 --> 00:21:30,480
will be defined in the fruit class

1243
00:21:30,480 --> 00:21:32,789
will be defined in the fruit class
green classes have access and red

1244
00:21:32,789 --> 00:21:32,799
green classes have access and red

1245
00:21:32,799 --> 00:21:34,789
green classes have access and red
classes do not

1246
00:21:34,789 --> 00:21:34,799
classes do not

1247
00:21:34,799 --> 00:21:36,070
classes do not
as you can see

1248
00:21:36,070 --> 00:21:36,080
as you can see

1249
00:21:36,080 --> 00:21:37,990
as you can see
a public member being defined in this

1250
00:21:37,990 --> 00:21:38,000
a public member being defined in this

1251
00:21:38,000 --> 00:21:40,950
a public member being defined in this
class or anywhere else can be accessed

1252
00:21:40,950 --> 00:21:40,960
class or anywhere else can be accessed

1253
00:21:40,960 --> 00:21:44,789
class or anywhere else can be accessed
from anywhere in your program

1254
00:21:44,789 --> 00:21:44,799
from anywhere in your program

1255
00:21:44,799 --> 00:21:48,230
from anywhere in your program
next we have the private modifier

1256
00:21:48,230 --> 00:21:48,240
next we have the private modifier

1257
00:21:48,240 --> 00:21:50,630
next we have the private modifier
private members can only be accessed

1258
00:21:50,630 --> 00:21:50,640
private members can only be accessed

1259
00:21:50,640 --> 00:21:52,710
private members can only be accessed
from within the same class that the

1260
00:21:52,710 --> 00:21:52,720
from within the same class that the

1261
00:21:52,720 --> 00:21:54,950
from within the same class that the
member is defined

1262
00:21:54,950 --> 00:21:54,960
member is defined

1263
00:21:54,960 --> 00:21:57,270
member is defined
this is best to use if you do not need

1264
00:21:57,270 --> 00:21:57,280
this is best to use if you do not need

1265
00:21:57,280 --> 00:21:59,590
this is best to use if you do not need
this information accessed from anywhere

1266
00:21:59,590 --> 00:21:59,600
this information accessed from anywhere

1267
00:21:59,600 --> 00:22:01,590
this information accessed from anywhere
else in the program

1268
00:22:01,590 --> 00:22:01,600
else in the program

1269
00:22:01,600 --> 00:22:02,870
else in the program
additionally

1270
00:22:02,870 --> 00:22:02,880
additionally

1271
00:22:02,880 --> 00:22:05,029
additionally
this allows you to create other private

1272
00:22:05,029 --> 00:22:05,039
this allows you to create other private

1273
00:22:05,039 --> 00:22:07,029
this allows you to create other private
members of the same name in separate

1274
00:22:07,029 --> 00:22:07,039
members of the same name in separate

1275
00:22:07,039 --> 00:22:09,590
members of the same name in separate
classes which will not conflict with one

1276
00:22:09,590 --> 00:22:09,600
classes which will not conflict with one

1277
00:22:09,600 --> 00:22:11,909
classes which will not conflict with one
another due to their private access

1278
00:22:11,909 --> 00:22:11,919
another due to their private access

1279
00:22:11,919 --> 00:22:13,590
another due to their private access
modifier

1280
00:22:13,590 --> 00:22:13,600
modifier

1281
00:22:13,600 --> 00:22:15,830
modifier
as you can see on the example class

1282
00:22:15,830 --> 00:22:15,840
as you can see on the example class

1283
00:22:15,840 --> 00:22:17,110
as you can see on the example class
hierarchy

1284
00:22:17,110 --> 00:22:17,120
hierarchy

1285
00:22:17,120 --> 00:22:19,029
hierarchy
a private member defined in the fruit

1286
00:22:19,029 --> 00:22:19,039
a private member defined in the fruit

1287
00:22:19,039 --> 00:22:19,990
a private member defined in the fruit
class

1288
00:22:19,990 --> 00:22:20,000
class

1289
00:22:20,000 --> 00:22:22,230
class
can only be accessed inside the fruit

1290
00:22:22,230 --> 00:22:22,240
can only be accessed inside the fruit

1291
00:22:22,240 --> 00:22:24,230
can only be accessed inside the fruit
class

1292
00:22:24,230 --> 00:22:24,240
class

1293
00:22:24,240 --> 00:22:27,029
class
we then have the protected modifier

1294
00:22:27,029 --> 00:22:27,039
we then have the protected modifier

1295
00:22:27,039 --> 00:22:29,190
we then have the protected modifier
a protected variable can be accessed

1296
00:22:29,190 --> 00:22:29,200
a protected variable can be accessed

1297
00:22:29,200 --> 00:22:31,590
a protected variable can be accessed
from within the class it is defined

1298
00:22:31,590 --> 00:22:31,600
from within the class it is defined

1299
00:22:31,600 --> 00:22:34,950
from within the class it is defined
as well as any subclasses of that class

1300
00:22:34,950 --> 00:22:34,960
as well as any subclasses of that class

1301
00:22:34,960 --> 00:22:36,070
as well as any subclasses of that class
essentially

1302
00:22:36,070 --> 00:22:36,080
essentially

1303
00:22:36,080 --> 00:22:38,149
essentially
protected variables are private to the

1304
00:22:38,149 --> 00:22:38,159
protected variables are private to the

1305
00:22:38,159 --> 00:22:41,190
protected variables are private to the
class hierarchy that they are defined in

1306
00:22:41,190 --> 00:22:41,200
class hierarchy that they are defined in

1307
00:22:41,200 --> 00:22:43,029
class hierarchy that they are defined in
this can be seen in the example class

1308
00:22:43,029 --> 00:22:43,039
this can be seen in the example class

1309
00:22:43,039 --> 00:22:49,510
this can be seen in the example class
hierarchy right now

1310
00:22:49,510 --> 00:22:49,520


1311
00:22:49,520 --> 00:22:51,750


1312
00:22:51,750 --> 00:22:51,760
in this final section we will be

1313
00:22:51,760 --> 00:22:53,750
in this final section we will be
covering the final of the four main

1314
00:22:53,750 --> 00:22:53,760
covering the final of the four main

1315
00:22:53,760 --> 00:22:55,029
covering the final of the four main
principles

1316
00:22:55,029 --> 00:22:55,039
principles

1317
00:22:55,039 --> 00:22:56,630
principles
polymorphism

1318
00:22:56,630 --> 00:22:56,640
polymorphism

1319
00:22:56,640 --> 00:22:59,110
polymorphism
polymorphism describes methods that are

1320
00:22:59,110 --> 00:22:59,120
polymorphism describes methods that are

1321
00:22:59,120 --> 00:23:02,149
polymorphism describes methods that are
able to take on many forms

1322
00:23:02,149 --> 00:23:02,159
able to take on many forms

1323
00:23:02,159 --> 00:23:05,110
able to take on many forms
there are two types of polymorphism

1324
00:23:05,110 --> 00:23:05,120
there are two types of polymorphism

1325
00:23:05,120 --> 00:23:07,590
there are two types of polymorphism
the first one is what is called dynamic

1326
00:23:07,590 --> 00:23:07,600
the first one is what is called dynamic

1327
00:23:07,600 --> 00:23:09,510
the first one is what is called dynamic
polymorphism

1328
00:23:09,510 --> 00:23:09,520
polymorphism

1329
00:23:09,520 --> 00:23:11,990
polymorphism
dynamic polymorphism occurs during run

1330
00:23:11,990 --> 00:23:12,000
dynamic polymorphism occurs during run

1331
00:23:12,000 --> 00:23:16,149
dynamic polymorphism occurs during run
time when the program is being executed

1332
00:23:16,149 --> 00:23:16,159
time when the program is being executed

1333
00:23:16,159 --> 00:23:18,549
time when the program is being executed
this describes when a method signature

1334
00:23:18,549 --> 00:23:18,559
this describes when a method signature

1335
00:23:18,559 --> 00:23:20,870
this describes when a method signature
is present in both a subclass and a

1336
00:23:20,870 --> 00:23:20,880
is present in both a subclass and a

1337
00:23:20,880 --> 00:23:22,870
is present in both a subclass and a
superclass

1338
00:23:22,870 --> 00:23:22,880
superclass

1339
00:23:22,880 --> 00:23:25,270
superclass
the methods share the same parameters

1340
00:23:25,270 --> 00:23:25,280
the methods share the same parameters

1341
00:23:25,280 --> 00:23:27,669
the methods share the same parameters
but have separate implementation

1342
00:23:27,669 --> 00:23:27,679
but have separate implementation

1343
00:23:27,679 --> 00:23:28,950
but have separate implementation
in this case

1344
00:23:28,950 --> 00:23:28,960
in this case

1345
00:23:28,960 --> 00:23:30,789
in this case
the subclasses implementation of the

1346
00:23:30,789 --> 00:23:30,799
the subclasses implementation of the

1347
00:23:30,799 --> 00:23:34,070
the subclasses implementation of the
method overrides the superclasses

1348
00:23:34,070 --> 00:23:34,080
method overrides the superclasses

1349
00:23:34,080 --> 00:23:36,470
method overrides the superclasses
let's go over an example

1350
00:23:36,470 --> 00:23:36,480
let's go over an example

1351
00:23:36,480 --> 00:23:38,470
let's go over an example
let's say you are writing a program to

1352
00:23:38,470 --> 00:23:38,480
let's say you are writing a program to

1353
00:23:38,480 --> 00:23:40,630
let's say you are writing a program to
represent many different types of cars

1354
00:23:40,630 --> 00:23:40,640
represent many different types of cars

1355
00:23:40,640 --> 00:23:43,110
represent many different types of cars
in a class hierarchy

1356
00:23:43,110 --> 00:23:43,120
in a class hierarchy

1357
00:23:43,120 --> 00:23:45,590
in a class hierarchy
at the top of the hierarchy you may have

1358
00:23:45,590 --> 00:23:45,600
at the top of the hierarchy you may have

1359
00:23:45,600 --> 00:23:48,149
at the top of the hierarchy you may have
the generic car class

1360
00:23:48,149 --> 00:23:48,159
the generic car class

1361
00:23:48,159 --> 00:23:51,110
the generic car class
you then may create a sports car class

1362
00:23:51,110 --> 00:23:51,120
you then may create a sports car class

1363
00:23:51,120 --> 00:23:54,149
you then may create a sports car class
as a subclass of the car class

1364
00:23:54,149 --> 00:23:54,159
as a subclass of the car class

1365
00:23:54,159 --> 00:23:56,710
as a subclass of the car class
you then may create a dot drive method

1366
00:23:56,710 --> 00:23:56,720
you then may create a dot drive method

1367
00:23:56,720 --> 00:23:58,950
you then may create a dot drive method
in both of the classes

1368
00:23:58,950 --> 00:23:58,960
in both of the classes

1369
00:23:58,960 --> 00:24:01,110
in both of the classes
in each of the classes the dot drive

1370
00:24:01,110 --> 00:24:01,120
in each of the classes the dot drive

1371
00:24:01,120 --> 00:24:03,110
in each of the classes the dot drive
function will take a double representing

1372
00:24:03,110 --> 00:24:03,120
function will take a double representing

1373
00:24:03,120 --> 00:24:04,870
function will take a double representing
the number of miles you would like the

1374
00:24:04,870 --> 00:24:04,880
the number of miles you would like the

1375
00:24:04,880 --> 00:24:06,310
the number of miles you would like the
car to drive

1376
00:24:06,310 --> 00:24:06,320
car to drive

1377
00:24:06,320 --> 00:24:08,149
car to drive
and the car's gas attribute will be

1378
00:24:08,149 --> 00:24:08,159
and the car's gas attribute will be

1379
00:24:08,159 --> 00:24:11,269
and the car's gas attribute will be
decreased by the pertinent amount

1380
00:24:11,269 --> 00:24:11,279
decreased by the pertinent amount

1381
00:24:11,279 --> 00:24:12,950
decreased by the pertinent amount
in the car class

1382
00:24:12,950 --> 00:24:12,960
in the car class

1383
00:24:12,960 --> 00:24:15,350
in the car class
the dot drive function may cause the

1384
00:24:15,350 --> 00:24:15,360
the dot drive function may cause the

1385
00:24:15,360 --> 00:24:19,430
the dot drive function may cause the
car's gas to decrease by 0.04 gallons

1386
00:24:19,430 --> 00:24:19,440
car's gas to decrease by 0.04 gallons

1387
00:24:19,440 --> 00:24:20,789
car's gas to decrease by 0.04 gallons
per mile

1388
00:24:20,789 --> 00:24:20,799
per mile

1389
00:24:20,799 --> 00:24:23,029
per mile
whereas the sports car class

1390
00:24:23,029 --> 00:24:23,039
whereas the sports car class

1391
00:24:23,039 --> 00:24:25,310
whereas the sports car class
may instead have its gas decreased by

1392
00:24:25,310 --> 00:24:25,320
may instead have its gas decreased by

1393
00:24:25,320 --> 00:24:29,190
may instead have its gas decreased by
0.02 gallons per mile it drives

1394
00:24:29,190 --> 00:24:29,200
0.02 gallons per mile it drives

1395
00:24:29,200 --> 00:24:31,110
0.02 gallons per mile it drives
if you create an instance of a sports

1396
00:24:31,110 --> 00:24:31,120
if you create an instance of a sports

1397
00:24:31,120 --> 00:24:33,750
if you create an instance of a sports
car called my sports car

1398
00:24:33,750 --> 00:24:33,760
car called my sports car

1399
00:24:33,760 --> 00:24:35,909
car called my sports car
the sports car implementation of the dot

1400
00:24:35,909 --> 00:24:35,919
the sports car implementation of the dot

1401
00:24:35,919 --> 00:24:38,390
the sports car implementation of the dot
drive method will override the generic

1402
00:24:38,390 --> 00:24:38,400
drive method will override the generic

1403
00:24:38,400 --> 00:24:41,590
drive method will override the generic
car version of the dot drive method

1404
00:24:41,590 --> 00:24:41,600
car version of the dot drive method

1405
00:24:41,600 --> 00:24:42,789
car version of the dot drive method
therefore

1406
00:24:42,789 --> 00:24:42,799
therefore

1407
00:24:42,799 --> 00:24:45,590
therefore
my sportscar.drive will decrease my

1408
00:24:45,590 --> 00:24:45,600
my sportscar.drive will decrease my

1409
00:24:45,600 --> 00:24:47,830
my sportscar.drive will decrease my
sports car's gas attribute

1410
00:24:47,830 --> 00:24:47,840
sports car's gas attribute

1411
00:24:47,840 --> 00:24:51,669
sports car's gas attribute
by 0.02 gallons per mile

1412
00:24:51,669 --> 00:24:51,679
by 0.02 gallons per mile

1413
00:24:51,679 --> 00:24:52,870
by 0.02 gallons per mile
however

1414
00:24:52,870 --> 00:24:52,880
however

1415
00:24:52,880 --> 00:24:54,710
however
were you to create an instance of the

1416
00:24:54,710 --> 00:24:54,720
were you to create an instance of the

1417
00:24:54,720 --> 00:24:57,430
were you to create an instance of the
car class called my car

1418
00:24:57,430 --> 00:24:57,440
car class called my car

1419
00:24:57,440 --> 00:25:00,630
car class called my car
my car.drive would instead decrease my

1420
00:25:00,630 --> 00:25:00,640
my car.drive would instead decrease my

1421
00:25:00,640 --> 00:25:01,830
my car.drive would instead decrease my
car's gas

1422
00:25:01,830 --> 00:25:01,840
car's gas

1423
00:25:01,840 --> 00:25:05,029
car's gas
by 0.04 gallons per mile

1424
00:25:05,029 --> 00:25:05,039
by 0.04 gallons per mile

1425
00:25:05,039 --> 00:25:07,269
by 0.04 gallons per mile
this is an example of dynamic

1426
00:25:07,269 --> 00:25:07,279
this is an example of dynamic

1427
00:25:07,279 --> 00:25:09,990
this is an example of dynamic
polymorphism as the implementation of a

1428
00:25:09,990 --> 00:25:10,000
polymorphism as the implementation of a

1429
00:25:10,000 --> 00:25:12,710
polymorphism as the implementation of a
method signature can change depending on

1430
00:25:12,710 --> 00:25:12,720
method signature can change depending on

1431
00:25:12,720 --> 00:25:15,350
method signature can change depending on
which level in the class hierarchy that

1432
00:25:15,350 --> 00:25:15,360
which level in the class hierarchy that

1433
00:25:15,360 --> 00:25:17,110
which level in the class hierarchy that
it is called

1434
00:25:17,110 --> 00:25:17,120
it is called

1435
00:25:17,120 --> 00:25:19,669
it is called
this works this way because the form of

1436
00:25:19,669 --> 00:25:19,679
this works this way because the form of

1437
00:25:19,679 --> 00:25:21,990
this works this way because the form of
the method that is called is decided

1438
00:25:21,990 --> 00:25:22,000
the method that is called is decided

1439
00:25:22,000 --> 00:25:25,269
the method that is called is decided
dynamically as the program is run

1440
00:25:25,269 --> 00:25:25,279
dynamically as the program is run

1441
00:25:25,279 --> 00:25:27,430
dynamically as the program is run
this idea can be extended across the

1442
00:25:27,430 --> 00:25:27,440
this idea can be extended across the

1443
00:25:27,440 --> 00:25:30,390
this idea can be extended across the
class hierarchy in more layers than just

1444
00:25:30,390 --> 00:25:30,400
class hierarchy in more layers than just

1445
00:25:30,400 --> 00:25:31,750
class hierarchy in more layers than just
two

1446
00:25:31,750 --> 00:25:31,760
two

1447
00:25:31,760 --> 00:25:33,590
two
you could add more subclasses

1448
00:25:33,590 --> 00:25:33,600
you could add more subclasses

1449
00:25:33,600 --> 00:25:35,350
you could add more subclasses
representing different types of sports

1450
00:25:35,350 --> 00:25:35,360
representing different types of sports

1451
00:25:35,360 --> 00:25:38,310
representing different types of sports
cars with their own.drive methods with

1452
00:25:38,310 --> 00:25:38,320
cars with their own.drive methods with

1453
00:25:38,320 --> 00:25:40,230
cars with their own.drive methods with
different implementations

1454
00:25:40,230 --> 00:25:40,240
different implementations

1455
00:25:40,240 --> 00:25:41,990
different implementations
and creating an instance of each of

1456
00:25:41,990 --> 00:25:42,000
and creating an instance of each of

1457
00:25:42,000 --> 00:25:43,510
and creating an instance of each of
these subclasses

1458
00:25:43,510 --> 00:25:43,520
these subclasses

1459
00:25:43,520 --> 00:25:45,430
these subclasses
would use their own implementation of

1460
00:25:45,430 --> 00:25:45,440
would use their own implementation of

1461
00:25:45,440 --> 00:25:48,710
would use their own implementation of
the dot drive method one call

1462
00:25:48,710 --> 00:25:48,720
the dot drive method one call

1463
00:25:48,720 --> 00:25:52,230
the dot drive method one call
the main benefit of dynamic polymorphism

1464
00:25:52,230 --> 00:25:52,240
the main benefit of dynamic polymorphism

1465
00:25:52,240 --> 00:25:54,310
the main benefit of dynamic polymorphism
is that it allows you to write methods

1466
00:25:54,310 --> 00:25:54,320
is that it allows you to write methods

1467
00:25:54,320 --> 00:25:56,789
is that it allows you to write methods
in the superclass without having to

1468
00:25:56,789 --> 00:25:56,799
in the superclass without having to

1469
00:25:56,799 --> 00:25:59,830
in the superclass without having to
include ifs and outshifts to account for

1470
00:25:59,830 --> 00:25:59,840
include ifs and outshifts to account for

1471
00:25:59,840 --> 00:26:02,710
include ifs and outshifts to account for
exactly which subclass is being used

1472
00:26:02,710 --> 00:26:02,720
exactly which subclass is being used

1473
00:26:02,720 --> 00:26:04,950
exactly which subclass is being used
when the method is called

1474
00:26:04,950 --> 00:26:04,960
when the method is called

1475
00:26:04,960 --> 00:26:07,269
when the method is called
the second type of polymorphism is

1476
00:26:07,269 --> 00:26:07,279
the second type of polymorphism is

1477
00:26:07,279 --> 00:26:09,590
the second type of polymorphism is
static polymorphism

1478
00:26:09,590 --> 00:26:09,600
static polymorphism

1479
00:26:09,600 --> 00:26:11,750
static polymorphism
static polymorphism occurs during

1480
00:26:11,750 --> 00:26:11,760
static polymorphism occurs during

1481
00:26:11,760 --> 00:26:13,190
static polymorphism occurs during
compile time

1482
00:26:13,190 --> 00:26:13,200
compile time

1483
00:26:13,200 --> 00:26:15,990
compile time
rather than run time

1484
00:26:15,990 --> 00:26:16,000
rather than run time

1485
00:26:16,000 --> 00:26:18,230
rather than run time
this refers to when multiple methods

1486
00:26:18,230 --> 00:26:18,240
this refers to when multiple methods

1487
00:26:18,240 --> 00:26:19,909
this refers to when multiple methods
with the same name

1488
00:26:19,909 --> 00:26:19,919
with the same name

1489
00:26:19,919 --> 00:26:22,470
with the same name
are defined in the same class

1490
00:26:22,470 --> 00:26:22,480
are defined in the same class

1491
00:26:22,480 --> 00:26:24,549
are defined in the same class
in this case the methods are

1492
00:26:24,549 --> 00:26:24,559
in this case the methods are

1493
00:26:24,559 --> 00:26:27,430
in this case the methods are
differentiated by their arguments

1494
00:26:27,430 --> 00:26:27,440
differentiated by their arguments

1495
00:26:27,440 --> 00:26:29,190
differentiated by their arguments
either they take a different number of

1496
00:26:29,190 --> 00:26:29,200
either they take a different number of

1497
00:26:29,200 --> 00:26:30,470
either they take a different number of
parameters

1498
00:26:30,470 --> 00:26:30,480
parameters

1499
00:26:30,480 --> 00:26:33,269
parameters
they take parameters of different types

1500
00:26:33,269 --> 00:26:33,279
they take parameters of different types

1501
00:26:33,279 --> 00:26:35,190
they take parameters of different types
or they take parameters in a different

1502
00:26:35,190 --> 00:26:35,200
or they take parameters in a different

1503
00:26:35,200 --> 00:26:36,830
or they take parameters in a different
order than one

1504
00:26:36,830 --> 00:26:36,840
order than one

1505
00:26:36,840 --> 00:26:39,510
order than one
another this is known as method

1506
00:26:39,510 --> 00:26:39,520
another this is known as method

1507
00:26:39,520 --> 00:26:41,110
another this is known as method
overloading

1508
00:26:41,110 --> 00:26:41,120
overloading

1509
00:26:41,120 --> 00:26:42,950
overloading
despite the names of the methods being

1510
00:26:42,950 --> 00:26:42,960
despite the names of the methods being

1511
00:26:42,960 --> 00:26:45,110
despite the names of the methods being
the same they have different method

1512
00:26:45,110 --> 00:26:45,120
the same they have different method

1513
00:26:45,120 --> 00:26:46,230
the same they have different method
signatures

1514
00:26:46,230 --> 00:26:46,240
signatures

1515
00:26:46,240 --> 00:26:47,590
signatures
due to their differences in the

1516
00:26:47,590 --> 00:26:47,600
due to their differences in the

1517
00:26:47,600 --> 00:26:49,990
due to their differences in the
parameters that they accept

1518
00:26:49,990 --> 00:26:50,000
parameters that they accept

1519
00:26:50,000 --> 00:26:52,710
parameters that they accept
to better understand this let's go back

1520
00:26:52,710 --> 00:26:52,720
to better understand this let's go back

1521
00:26:52,720 --> 00:26:55,190
to better understand this let's go back
to the car example

1522
00:26:55,190 --> 00:26:55,200
to the car example

1523
00:26:55,200 --> 00:26:57,029
to the car example
let's say that you are working within

1524
00:26:57,029 --> 00:26:57,039
let's say that you are working within

1525
00:26:57,039 --> 00:26:59,110
let's say that you are working within
the car class

1526
00:26:59,110 --> 00:26:59,120
the car class

1527
00:26:59,120 --> 00:27:01,750
the car class
in this class you are looking to create

1528
00:27:01,750 --> 00:27:01,760
in this class you are looking to create

1529
00:27:01,760 --> 00:27:04,470
in this class you are looking to create
three different drive methods

1530
00:27:04,470 --> 00:27:04,480
three different drive methods

1531
00:27:04,480 --> 00:27:07,029
three different drive methods
the first drive methods argument accepts

1532
00:27:07,029 --> 00:27:07,039
the first drive methods argument accepts

1533
00:27:07,039 --> 00:27:10,230
the first drive methods argument accepts
one integer and one string as parameters

1534
00:27:10,230 --> 00:27:10,240
one integer and one string as parameters

1535
00:27:10,240 --> 00:27:13,029
one integer and one string as parameters
say speed and destination

1536
00:27:13,029 --> 00:27:13,039
say speed and destination

1537
00:27:13,039 --> 00:27:14,630
say speed and destination
for clarity

1538
00:27:14,630 --> 00:27:14,640
for clarity

1539
00:27:14,640 --> 00:27:16,630
for clarity
we will refer to this one as drive

1540
00:27:16,630 --> 00:27:16,640
we will refer to this one as drive

1541
00:27:16,640 --> 00:27:18,070
we will refer to this one as drive
method one

1542
00:27:18,070 --> 00:27:18,080
method one

1543
00:27:18,080 --> 00:27:20,230
method one
however keep in mind that its method

1544
00:27:20,230 --> 00:27:20,240
however keep in mind that its method

1545
00:27:20,240 --> 00:27:23,110
however keep in mind that its method
name is just drive

1546
00:27:23,110 --> 00:27:23,120
name is just drive

1547
00:27:23,120 --> 00:27:25,190
name is just drive
for drive method 2

1548
00:27:25,190 --> 00:27:25,200
for drive method 2

1549
00:27:25,200 --> 00:27:27,430
for drive method 2
we will set its argument to accept two

1550
00:27:27,430 --> 00:27:27,440
we will set its argument to accept two

1551
00:27:27,440 --> 00:27:28,549
we will set its argument to accept two
integers

1552
00:27:28,549 --> 00:27:28,559
integers

1553
00:27:28,559 --> 00:27:31,909
integers
for instance distance and speed

1554
00:27:31,909 --> 00:27:31,919
for instance distance and speed

1555
00:27:31,919 --> 00:27:34,710
for instance distance and speed
finally in drive method 3

1556
00:27:34,710 --> 00:27:34,720
finally in drive method 3

1557
00:27:34,720 --> 00:27:36,710
finally in drive method 3
we will have it accept a string first

1558
00:27:36,710 --> 00:27:36,720
we will have it accept a string first

1559
00:27:36,720 --> 00:27:38,230
we will have it accept a string first
for destination

1560
00:27:38,230 --> 00:27:38,240
for destination

1561
00:27:38,240 --> 00:27:41,510
for destination
and then an integer for speed

1562
00:27:41,510 --> 00:27:41,520
and then an integer for speed

1563
00:27:41,520 --> 00:27:44,149
and then an integer for speed
this differs from drive method 1

1564
00:27:44,149 --> 00:27:44,159
this differs from drive method 1

1565
00:27:44,159 --> 00:27:46,870
this differs from drive method 1
in that drive method 1's parameters are

1566
00:27:46,870 --> 00:27:46,880
in that drive method 1's parameters are

1567
00:27:46,880 --> 00:27:48,789
in that drive method 1's parameters are
in reverse order compared to drive

1568
00:27:48,789 --> 00:27:48,799
in reverse order compared to drive

1569
00:27:48,799 --> 00:27:51,269
in reverse order compared to drive
method threes

1570
00:27:51,269 --> 00:27:51,279
method threes

1571
00:27:51,279 --> 00:27:53,830
method threes
in each of these three example methods

1572
00:27:53,830 --> 00:27:53,840
in each of these three example methods

1573
00:27:53,840 --> 00:27:55,830
in each of these three example methods
the method signature is different

1574
00:27:55,830 --> 00:27:55,840
the method signature is different

1575
00:27:55,840 --> 00:27:58,630
the method signature is different
despite the methods having the same name

1576
00:27:58,630 --> 00:27:58,640
despite the methods having the same name

1577
00:27:58,640 --> 00:28:00,789
despite the methods having the same name
therefore the computer is able to tell

1578
00:28:00,789 --> 00:28:00,799
therefore the computer is able to tell

1579
00:28:00,799 --> 00:28:02,710
therefore the computer is able to tell
the methods apart when the program is

1580
00:28:02,710 --> 00:28:02,720
the methods apart when the program is

1581
00:28:02,720 --> 00:28:04,950
the methods apart when the program is
being compiled

1582
00:28:04,950 --> 00:28:04,960
being compiled

1583
00:28:04,960 --> 00:28:06,470
being compiled
for example

1584
00:28:06,470 --> 00:28:06,480
for example

1585
00:28:06,480 --> 00:28:09,990
for example
where i to call mycar.drive45

1586
00:28:09,990 --> 00:28:10,000
where i to call mycar.drive45

1587
00:28:10,000 --> 00:28:10,950
where i to call mycar.drive45
work

1588
00:28:10,950 --> 00:28:10,960
work

1589
00:28:10,960 --> 00:28:13,110
work
drive method 1 would be called

1590
00:28:13,110 --> 00:28:13,120
drive method 1 would be called

1591
00:28:13,120 --> 00:28:15,590
drive method 1 would be called
as the argument given indicates that

1592
00:28:15,590 --> 00:28:15,600
as the argument given indicates that

1593
00:28:15,600 --> 00:28:18,870
as the argument given indicates that
this is the method i would like to call

1594
00:28:18,870 --> 00:28:18,880
this is the method i would like to call

1595
00:28:18,880 --> 00:28:23,029
this is the method i would like to call
furthermore my car.drive 1560

1596
00:28:23,029 --> 00:28:23,039
furthermore my car.drive 1560

1597
00:28:23,039 --> 00:28:25,110
furthermore my car.drive 1560
would call drive method 2

1598
00:28:25,110 --> 00:28:25,120
would call drive method 2

1599
00:28:25,120 --> 00:28:28,710
would call drive method 2
and my call.drive school 30 would call

1600
00:28:28,710 --> 00:28:28,720
and my call.drive school 30 would call

1601
00:28:28,720 --> 00:28:30,710
and my call.drive school 30 would call
drive method three

1602
00:28:30,710 --> 00:28:30,720
drive method three

1603
00:28:30,720 --> 00:28:32,950
drive method three
when implementing method overloading the

1604
00:28:32,950 --> 00:28:32,960
when implementing method overloading the

1605
00:28:32,960 --> 00:28:34,789
when implementing method overloading the
different methods tend to have separate

1606
00:28:34,789 --> 00:28:34,799
different methods tend to have separate

1607
00:28:34,799 --> 00:28:37,350
different methods tend to have separate
but similar effects

1608
00:28:37,350 --> 00:28:37,360
but similar effects

1609
00:28:37,360 --> 00:28:39,110
but similar effects
despite drive method one and drive

1610
00:28:39,110 --> 00:28:39,120
despite drive method one and drive

1611
00:28:39,120 --> 00:28:41,669
despite drive method one and drive
method three taking the same parameters

1612
00:28:41,669 --> 00:28:41,679
method three taking the same parameters

1613
00:28:41,679 --> 00:28:43,430
method three taking the same parameters
it is likely that their implementation

1614
00:28:43,430 --> 00:28:43,440
it is likely that their implementation

1615
00:28:43,440 --> 00:28:45,110
it is likely that their implementation
would be different and thus would

1616
00:28:45,110 --> 00:28:45,120
would be different and thus would

1617
00:28:45,120 --> 00:28:46,789
would be different and thus would
achieve separate effects

1618
00:28:46,789 --> 00:28:46,799
achieve separate effects

1619
00:28:46,799 --> 00:28:48,470
achieve separate effects
otherwise there would be no reason to

1620
00:28:48,470 --> 00:28:48,480
otherwise there would be no reason to

1621
00:28:48,480 --> 00:28:50,549
otherwise there would be no reason to
have both methods

1622
00:28:50,549 --> 00:28:50,559
have both methods

1623
00:28:50,559 --> 00:28:52,710
have both methods
keep in mind that method overloading can

1624
00:28:52,710 --> 00:28:52,720
keep in mind that method overloading can

1625
00:28:52,720 --> 00:28:54,549
keep in mind that method overloading can
cause trouble if you do not keep

1626
00:28:54,549 --> 00:28:54,559
cause trouble if you do not keep

1627
00:28:54,559 --> 00:28:56,070
cause trouble if you do not keep
straight which of the methods

1628
00:28:56,070 --> 00:28:56,080
straight which of the methods

1629
00:28:56,080 --> 00:28:57,430
straight which of the methods
implementations you would like to

1630
00:28:57,430 --> 00:28:57,440
implementations you would like to

1631
00:28:57,440 --> 00:28:58,389
implementations you would like to
execute

1632
00:28:58,389 --> 00:28:58,399
execute

1633
00:28:58,399 --> 00:29:00,470
execute
and what form of the argument is

1634
00:29:00,470 --> 00:29:00,480
and what form of the argument is

1635
00:29:00,480 --> 00:29:02,789
and what form of the argument is
required to do so

1636
00:29:02,789 --> 00:29:02,799
required to do so

1637
00:29:02,799 --> 00:29:04,950
required to do so
normally if you call a method with too

1638
00:29:04,950 --> 00:29:04,960
normally if you call a method with too

1639
00:29:04,960 --> 00:29:07,190
normally if you call a method with too
many parameters or parameters of the

1640
00:29:07,190 --> 00:29:07,200
many parameters or parameters of the

1641
00:29:07,200 --> 00:29:08,470
many parameters or parameters of the
incorrect type

1642
00:29:08,470 --> 00:29:08,480
incorrect type

1643
00:29:08,480 --> 00:29:10,630
incorrect type
then the program will throw an error and

1644
00:29:10,630 --> 00:29:10,640
then the program will throw an error and

1645
00:29:10,640 --> 00:29:13,190
then the program will throw an error and
you will be able to fix the issue

1646
00:29:13,190 --> 00:29:13,200
you will be able to fix the issue

1647
00:29:13,200 --> 00:29:14,310
you will be able to fix the issue
however

1648
00:29:14,310 --> 00:29:14,320
however

1649
00:29:14,320 --> 00:29:16,789
however
if you mistake the methods argument in

1650
00:29:16,789 --> 00:29:16,799
if you mistake the methods argument in

1651
00:29:16,799 --> 00:29:19,029
if you mistake the methods argument in
such a way that one of the other methods

1652
00:29:19,029 --> 00:29:19,039
such a way that one of the other methods

1653
00:29:19,039 --> 00:29:21,750
such a way that one of the other methods
with the same name is called instead

1654
00:29:21,750 --> 00:29:21,760
with the same name is called instead

1655
00:29:21,760 --> 00:29:23,750
with the same name is called instead
then you may not even be aware that you

1656
00:29:23,750 --> 00:29:23,760
then you may not even be aware that you

1657
00:29:23,760 --> 00:29:24,830
then you may not even be aware that you
made a

1658
00:29:24,830 --> 00:29:24,840
made a

1659
00:29:24,840 --> 00:29:27,110
made a
mistake overall

1660
00:29:27,110 --> 00:29:27,120
mistake overall

1661
00:29:27,120 --> 00:29:29,269
mistake overall
polymorphism simply allows methods to

1662
00:29:29,269 --> 00:29:29,279
polymorphism simply allows methods to

1663
00:29:29,279 --> 00:29:31,590
polymorphism simply allows methods to
take on many different forms

1664
00:29:31,590 --> 00:29:31,600
take on many different forms

1665
00:29:31,600 --> 00:29:34,149
take on many different forms
it can be very useful in that it allows

1666
00:29:34,149 --> 00:29:34,159
it can be very useful in that it allows

1667
00:29:34,159 --> 00:29:36,710
it can be very useful in that it allows
methods of the same name to exist both

1668
00:29:36,710 --> 00:29:36,720
methods of the same name to exist both

1669
00:29:36,720 --> 00:29:38,310
methods of the same name to exist both
in the same class

1670
00:29:38,310 --> 00:29:38,320
in the same class

1671
00:29:38,320 --> 00:29:40,549
in the same class
and in different classes

1672
00:29:40,549 --> 00:29:40,559
and in different classes

1673
00:29:40,559 --> 00:29:42,710
and in different classes
however you must be careful to ensure

1674
00:29:42,710 --> 00:29:42,720
however you must be careful to ensure

1675
00:29:42,720 --> 00:29:44,710
however you must be careful to ensure
that you are calling the correct form of

1676
00:29:44,710 --> 00:29:44,720
that you are calling the correct form of

1677
00:29:44,720 --> 00:29:46,310
that you are calling the correct form of
the method that you want

1678
00:29:46,310 --> 00:29:46,320
the method that you want

1679
00:29:46,320 --> 00:29:50,470
the method that you want
so your program can function as intended

1680
00:29:50,470 --> 00:29:50,480
so your program can function as intended

1681
00:29:50,480 --> 00:29:52,789
so your program can function as intended
that does it for polymorphism

1682
00:29:52,789 --> 00:29:52,799
that does it for polymorphism

1683
00:29:52,799 --> 00:29:54,950
that does it for polymorphism
and with the end of polymorphism the

1684
00:29:54,950 --> 00:29:54,960
and with the end of polymorphism the

1685
00:29:54,960 --> 00:29:57,110
and with the end of polymorphism the
final of the four main principles

1686
00:29:57,110 --> 00:29:57,120
final of the four main principles

1687
00:29:57,120 --> 00:29:58,950
final of the four main principles
comes the end of this video on an

1688
00:29:58,950 --> 00:29:58,960
comes the end of this video on an

1689
00:29:58,960 --> 00:30:00,630
comes the end of this video on an
introduction to object oriented

1690
00:30:00,630 --> 00:30:00,640
introduction to object oriented

1691
00:30:00,640 --> 00:30:02,230
introduction to object oriented
programming

1692
00:30:02,230 --> 00:30:02,240
programming

1693
00:30:02,240 --> 00:30:04,710
programming
if you enjoyed consider liking and

1694
00:30:04,710 --> 00:30:04,720
if you enjoyed consider liking and

1695
00:30:04,720 --> 00:30:07,110
if you enjoyed consider liking and
subscribing to null pointer exception

1696
00:30:07,110 --> 00:30:07,120
subscribing to null pointer exception

1697
00:30:07,120 --> 00:30:09,269
subscribing to null pointer exception
and check out some of our other videos

1698
00:30:09,269 --> 00:30:09,279
and check out some of our other videos

1699
00:30:09,279 --> 00:30:11,110
and check out some of our other videos
in which we cover a variety of other

1700
00:30:11,110 --> 00:30:11,120
in which we cover a variety of other

1701
00:30:11,120 --> 00:30:13,510
in which we cover a variety of other
topics that you may find helpful

1702
00:30:13,510 --> 00:30:13,520
topics that you may find helpful

1703
00:30:13,520 --> 00:30:16,919
topics that you may find helpful
thanks for watching

